<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>CV on Inno Jia</title>
    <link>https://kobehub.github.io/categories/cv/</link>
    <description>Recent content in CV on Inno Jia</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Fri, 17 May 2019 22:39:33 +0800</lastBuildDate>
    
	<atom:link href="https://kobehub.github.io/categories/cv/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>[Review] Image Preprocess</title>
      <link>https://kobehub.github.io/posts/image-preprocess/</link>
      <pubDate>Fri, 17 May 2019 22:39:33 +0800</pubDate>
      
      <guid>https://kobehub.github.io/posts/image-preprocess/</guid>
      <description>图像预处理 1. 基本的图像处理  在空间坐标删的处理  几何变换  像素处理  代数处理（对于每一个像素点的操作）   2. 代数操作 不改变图像的几何性质，对于图像的灰度级进行加减乘除等算术运算，逐像素的操作。
2.1 生成图像叠加效果（Alpha Blending）  对于两个图像的合成可以使用加法进行叠加操作： $$ g(x, y) = \alpha*f(x, y) + \beta*f(x, y) \alpha + \beta = 1 $$ 也可以用于任何两张图像的衔接。
 使用乘法，可以进行特定区域的提取，可以将除了待提取区域的位置的像素全部置为0 $$ C = \alpha*F + (1-\alpha)B $$
  2.2 获取图像的前景 可以给定一个当前图像$I$,以及对应的背景图像$B$,然后计算两个图像之间的差异： $$ Diff(x,y) = ||I(x, y) \; - \; B(x,y)||^2 $$ 如果该差异值大于某一个特定值$T$，就可以视为前景图像.在背景保持不变的环境下，对于运动目标的检测：可以使用减法操作完成，在差图像不为零的位置表明出现过运动目标。
3.逻辑操作  AND: 等价于乘法 OR: 等价于乘法 XOR: 异或操作 NOT： 非  4.</description>
    </item>
    
    <item>
      <title>[Review] Introduction to Coomputer Vision</title>
      <link>https://kobehub.github.io/posts/introduction-to-computer-vision/</link>
      <pubDate>Sun, 12 May 2019 20:13:35 +0800</pubDate>
      
      <guid>https://kobehub.github.io/posts/introduction-to-computer-vision/</guid>
      <description>计算机视觉绪论 1. 概述 1.1 视觉可以分为：  视感觉：从分子层次和观点理解人类对于光反应的基本性质  光的物理特性 刺激视觉感受器官的程度 光作用于视网膜后经视觉系统加工产生的感觉  视知觉：最终目的从狭义上说是要能对于客观场景做出观察者有意义的解释和描述  1.2 计算机视觉的目标  建立CV系统来完成各种视觉任务 加深对于人脑是觉得掌握和理解  2. 图像基础 2.1 图像分类  模拟图像  从连续的客观场景直接观察得到，用一个二维函数$f(x, y)$来表示
 数字图像  把连续的模拟图像在*坐标空间XY*以及*性质空间F*都离散化了的图像,基本单位像素
2.2 图像的表示 函数表示 把图像看作一个由二维空间向一维空间的映射函数，有几个channel则有几个映射函数
矩阵以及向量 RGB模型 三原色模型需要使用三个灰度值的映射表示： $$ f_c(x, y) = (f_r(x, y), f_g(x, y), f_b(x, y)) $$
存储  交叉存储[R G B] 为一个基本存储单元 顺序存储  简单照明模型 Phong模型，基于RGB三基色颜色系统的Phong模型：
$$ I = ka I{pa} + \sum [ kd I{pd} cosi + Ks I{ps} cos^n \theta ] $$</description>
    </item>
    
  </channel>
</rss>