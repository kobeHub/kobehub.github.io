<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Golang on Inno Jia</title>
    <link>https://kobehub.github.io/categories/golang/</link>
    <description>Recent content in Golang on Inno Jia</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Fri, 25 Jan 2019 14:16:20 +0800</lastBuildDate>
    
	<atom:link href="https://kobehub.github.io/categories/golang/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Yet another tool to mock interfaces in Go</title>
      <link>https://kobehub.github.io/posts/yet-another-tool-to-mock-interface-in-go/</link>
      <pubDate>Fri, 25 Jan 2019 14:16:20 +0800</pubDate>
      
      <guid>https://kobehub.github.io/posts/yet-another-tool-to-mock-interface-in-go/</guid>
      <description>Go 语言中一个模拟接口的工具 单元测试作为一种强大的工具，可以检查代码各个方面的行为。如果对进行代码测试十分重视，那么将会一直编写可持续、可维护的代码，并且在代码的实现过程中保持代码的完整性。依赖于抽象的、经过开发者精心设计的代码是很容易进行测试的，所以代码的可测试性也作为其质量的一个指标。
如果你已经在 Go 中尝试过测试代码，可能知道接口的巨大作用。在 Go 的标准库中，提供了一系列接口，这些接口大多数只包含一个方法，可以直接使用这些接口。
Go 还有一个补充框架，用以模拟接口。同时，还有一些社区驱动的包可以完成类似的功能。他们中的大多数都可以根据给定接口，生成实现这些接口的 struct 。 对于较大的接口，或者嵌套了其他接口，使用这种方式很有效。当接口只有一个方法时，不是更有效果吗？
关于 Go 中的接口，最令人惊讶的部分是它的默认满足性。任何类型，只需要提供其签名与接口声明中的方法匹配的实现，即可以满足该接口。这种类型甚至可以是函数，如果熟悉 net/http 包，你也可能看到其中的一种可以叫做 adapters 的类型。
// A Handler responds to an HTTP request. type Handler interface { ServeHTTP(ResponseWriter, *Request) } // The HandlerFunc type is an adapter to allow the use of // ordinary functions as HTTP handlers. If f is a function // with the appropriate signature, HandlerFunc(f) is a // Handler that calls f.</description>
    </item>
    
  </channel>
</rss>