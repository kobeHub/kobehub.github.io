<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on Inno Jia</title>
    <link>https://kobehub.github.io/categories/python/</link>
    <description>Recent content in Python on Inno Jia</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Sat, 06 Jul 2019 15:50:20 +0800</lastBuildDate>
    
	<atom:link href="https://kobehub.github.io/categories/python/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Python type 以及 object详解</title>
      <link>https://kobehub.github.io/posts/python-type-%E4%BB%A5%E5%8F%8A-object%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Sat, 06 Jul 2019 15:50:20 +0800</pubDate>
      
      <guid>https://kobehub.github.io/posts/python-type-%E4%BB%A5%E5%8F%8A-object%E8%AF%A6%E8%A7%A3/</guid>
      <description>基础概念 1. 什么是object? 在python中，遵守着“一切皆对象”的箴言。所有的类型、实例、类均为对象。这是在本文开始前需要明确的。那么在python中，对象的定义到底是什么呢？所有表示实体的概念都可以视为一个对象，一般具有以下特征:
 标识符（Identity）： 用于唯一标示一个对象的标志 值(value): 对象所存储的值，可能包含很多属性（可以使用object.attr对于属性进行操作） 类型(type): 每个对象有且仅有一个类型 基类（bases）： 可以有一个或者多个基类，类似于面向对象语言的父类或者超类，支持多继承。并不是所有的对象都有基类。  如果对于python对象的内存分布更感兴趣，其实可以通过理解元数据（meta）抽象，加深理解。所有的对象在内存中都有一个特定的地址，可以通过id()函数获取其地址。
类型以及基类对于object至关重要，因为他们确定了对象的具体行为，以及与其他对象的关系。同时需要牢记的是所有的类型以及基类都是object！
以一个简单的1对象为例:
&amp;gt;&amp;gt;&amp;gt; a = 1 # 在当前的命名空间给一个整数object名字为a &amp;gt;&amp;gt;&amp;gt; type(a) &amp;lt;class &amp;#39;int&amp;#39;&amp;gt;&amp;gt;&amp;gt;&amp;gt; type(type(a))&amp;lt;class &amp;#39;type&amp;#39;&amp;gt;&amp;gt;&amp;gt;&amp;gt; type(a).__base__&amp;lt;class &amp;#39;object&amp;#39;&amp;gt;&amp;gt;&amp;gt;&amp;gt; type(a).__bases__(&amp;lt;class &amp;#39;object&amp;#39;&amp;gt;,)&amp;gt;&amp;gt;&amp;gt; dir(a)[&amp;#39;__abs__&amp;#39;, &amp;#39;__add__&amp;#39;, &amp;#39;__and__&amp;#39;, &amp;#39;__bool__&amp;#39;, &amp;#39;__ceil__&amp;#39;, &amp;#39;__class__&amp;#39;, &amp;#39;__delattr__&amp;#39;, &amp;#39;__dir__&amp;#39;, &amp;#39;__divmod__&amp;#39;, &amp;#39;__doc__&amp;#39;, &amp;#39;__eq__&amp;#39;, &amp;#39;__float__&amp;#39;, &amp;#39;__floor__&amp;#39;, &amp;#39;__floordiv__&amp;#39;, &amp;#39;__format__&amp;#39;, &amp;#39;__ge__&amp;#39;, &amp;#39;__getattribute__&amp;#39;, &amp;#39;__getnewargs__&amp;#39;, &amp;#39;__gt__&amp;#39;, &amp;#39;__hash__&amp;#39;, &amp;#39;__index__&amp;#39;, &amp;#39;__init__&amp;#39;, &amp;#39;__init_subclass__&amp;#39;, &amp;#39;__int__&amp;#39;, &amp;#39;__invert__&amp;#39;, &amp;#39;__le__&amp;#39;, &amp;#39;__lshift__&amp;#39;, &amp;#39;__lt__&amp;#39;, &amp;#39;__mod__&amp;#39;, &amp;#39;__mul__&amp;#39;, &amp;#39;__ne__&amp;#39;, &amp;#39;__neg__&amp;#39;, &amp;#39;__new__&amp;#39;, &amp;#39;__or__&amp;#39;, &amp;#39;__pos__&amp;#39;, &amp;#39;__pow__&amp;#39;, &amp;#39;__radd__&amp;#39;, &amp;#39;__rand__&amp;#39;, &amp;#39;__rdivmod__&amp;#39;, &amp;#39;__reduce__&amp;#39;, &amp;#39;__reduce_ex__&amp;#39;, &amp;#39;__repr__&amp;#39;, &amp;#39;__rfloordiv__&amp;#39;, &amp;#39;__rlshift__&amp;#39;, &amp;#39;__rmod__&amp;#39;, &amp;#39;__rmul__&amp;#39;, &amp;#39;__ror__&amp;#39;, &amp;#39;__round__&amp;#39;, &amp;#39;__rpow__&amp;#39;, &amp;#39;__rrshift__&amp;#39;, &amp;#39;__rshift__&amp;#39;, &amp;#39;__rsub__&amp;#39;, &amp;#39;__rtruediv__&amp;#39;, &amp;#39;__rxor__&amp;#39;, &amp;#39;__setattr__&amp;#39;, &amp;#39;__sizeof__&amp;#39;, &amp;#39;__str__&amp;#39;, &amp;#39;__sub__&amp;#39;, &amp;#39;__subclasshook__&amp;#39;, &amp;#39;__truediv__&amp;#39;, &amp;#39;__trunc__&amp;#39;, &amp;#39;__xor__&amp;#39;, &amp;#39;bit_length&amp;#39;, &amp;#39;conjugate&amp;#39;, &amp;#39;denominator&amp;#39;, &amp;#39;from_bytes&amp;#39;, &amp;#39;imag&amp;#39;, &amp;#39;numerator&amp;#39;, &amp;#39;real&amp;#39;, &amp;#39;to_bytes&amp;#39;] 一个object有一个名字（name），但是却不属于对象本身，对象的名称在对象之外，存在于命名空间中，或者作为另一个对象的属性。对于一个object，可以使用__bases__属性获取其所有基类的元组，使用dir()函数获取所有的方法以及属性。</description>
    </item>
    
  </channel>
</rss>