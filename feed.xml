<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="https://kobehub.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://kobehub.github.io/" rel="alternate" type="text/html" hreflang="en" /><updated>2025-10-17T22:05:27+00:00</updated><id>https://kobehub.github.io/feed.xml</id><title type="html">blank</title><subtitle>Personal website of Inno, holding blogs related computer technology and life.
</subtitle><entry><title type="html">Common used random variables</title><link href="https://kobehub.github.io/blog/2024/random-variables/" rel="alternate" type="text/html" title="Common used random variables" /><published>2024-06-17T11:00:00+00:00</published><updated>2024-06-17T11:00:00+00:00</updated><id>https://kobehub.github.io/blog/2024/random-variables</id><content type="html" xml:base="https://kobehub.github.io/blog/2024/random-variables/"><![CDATA[<p>In this post, I am going to summarize some common used random variables for future references.</p>

<h2 id="bernoulli-distribution">Bernoulli Distribution</h2>

<p>A Bernoulli distribution is the simplest discrete probability distribution, representing a single trial that has only two possible outcomes: success (usually denoted by 1) or failure (usually denoted by 0). $ T_t $ has one parameter $ p $, which represents the probability of success.</p>

\[\begin{aligned}
    P(X=1)=p \\ 
    P(X=0)=1‚àíp
\end{aligned}\]

<p><strong>Mean and Variance</strong></p>

\[\begin{aligned}
    E(X) = p \\
    Var(X) = p (1-p)
\end{aligned}\]

<h2 id="binomial-distribution">Binomial Distribution</h2>

<p>A Binomial distribution represents the number of successes in a fixed number of independent Bernoulli trials, each with the same probability of success. The binomial distribution has parameters $(n, p)$ with $n$ as the number of trails and $p$ is the probability of success of one Bernoulli trail.</p>

<p>The PMF is:</p>

\[\begin{aligned}
X \sim \rm{Binomial}(n, p) \\
p(X = k) = \binom{n}{k}p^k(1-p)^{n-k}
\end{aligned}\]

<p><strong>Mean and Variance</strong></p>

\[\begin{aligned}
        E(X) = np \\
        Var(X) = np (1-p)
    \end{aligned}\]

<h2 id="poisson-distribution">Poisson Distribution</h2>

<p>Poisson is a discrete probability distribution to express the probability of a given number of events occurring in a fixed interval of time (i.e. the number of tasks arriving in queuing systems). These events occur with a known mean rate $(\lambda)$ and independently of the time since the last event. The Poisson distribution deals with the number of occurrences in a fixed period of time, and the exponential distribution deals with the time between occurrences of successive events as time flows by continuously.</p>

<p>The probability mass function is:</p>

\[P(X = k) = \frac{\lambda^k e^{-\lambda}}{k!}\]

<p>The positive real number $\lambda$ is equal to the expected value, and the variance of $X$:</p>

\[\lambda = \rm{E}(X) = Var(X)\]

<p>The Poisson distribution can be seen as a limit of the binomial distribution under certain conditions. This is known as the <strong>Poisson approximation to the binomial distribution</strong>.</p>

<p>The Poisson distribution is a good approximation to the binomial distribution when:</p>

<ol>
  <li><strong>$n$ is large</strong> (the number of trials is large).</li>
  <li><strong>$p$ is small</strong> (the probability of success in each trial is small).</li>
  <li>The product  $np=\lambda$ is moderate (the expected number of successes remains constant).</li>
</ol>

<p><strong>Additivity</strong>: if $X_i \sim \rm{Poisson(\lambda_i)}$, for $i = 1, 2, \dots, n$, and the $X_i$ is independent, then</p>

\[X_1 + X_2 + \dots + X_n \sim \rm{Poisson(\lambda_1 + \lambda_2 + \dots + \lambda_n)}\]

<h3 id="poisson-distribution-as-an-approximation-of-binomial-distribution">Poisson distribution as an approximation of Binomial distribution</h3>

<p>As a rule of thumb, if $n \ge 100 $ and $np &lt; 10$, the Poisson distribution (taking $\lambda = np$‚Äã‚Äã) can provide a very good approximation to the binomial distribution.</p>

\[\lim_{n\rightarrow \infty} \rm{Binomial}(x) = \frac{e^{-\lambda} \lambda^x}{x!}\]

<p>One important limit is used to prove the approximation:</p>

\[\lim_{n\rightarrow \infty} (1 + \frac{r}{n})^n = e^r \text{ or, } \\
    \lim_{h\rightarrow 0} (1 + rh)^{1/h} = e^r\]

<p>To better see the connection between these two distributions, consider the binomial probability of seeing $x$ successes in $n$ trials, with the aforementioned probability of success, $p$, as shown below.</p>

\[P(x) = \binom{n}{x} p^x (1-p)^{n - x}\]

<p>Let denote the expected value of the binomial distribution as $\lambda = np$, which means $p = \frac{\lambda}{n}$. Here $\lambda$ is also the arriving rate of success event of the approximated Poisson distribution.</p>

<p>The probability mass function can be written as follows:</p>

\[P(x) = \binom{n}{x} (\frac{\lambda}{n})^x (1- \frac{\lambda}{n})^{n - x}\]

<p>Using the standard formula for the combinations of $n$ things taken $x$ at a time and some simple properties of exponents, we can further expand things to</p>

\[P(x) = \frac{n(n-1)\cdots (n-x+1)}{x!} \cdot \frac{\lambda^x}{n^x} (1- \frac{\lambda}{n})^{n - x}\]

<p>Notice that there are exactly xùë• factors in the numerator of the first fraction. Let us swap denominators between the first and second fractions, splitting the$ $n^x$ all of the factors of the first fraction‚Äôs numerator.</p>

\[P(x) = \frac{n}{n} \cdot \frac{n-1}{n} \cdots \frac{n-x+1}{n} \cdot \frac{\lambda^x}{x!} (1- \frac{\lambda}{n})^{n} \cdot (1- \frac{\lambda}{n})^{-x}\]

<p>Finally, applying the limit to $P(x)$ and keeping $x, \lambda$ Fiexed:</p>

\[\begin{align}
    \lim_{n\rightarrow\infty} P(x) = \frac{\lambda^x}{x!} \lim_{n\rightarrow\infty} (\frac{n}{n} \cdot \frac{n-1}{n} \cdots \frac{n-x+1}{n}) \cdot (1- \frac{\lambda}{n})^{-x} \cdot \lim_{n\rightarrow\infty} (1- \frac{\lambda}{n})^{n} \\
    = \frac{e^{-\lambda} \lambda^x}{x!}
    \end{align}\]

<h2 id="exponential-distribution">Exponential Distribution</h2>

<p>For the continuous version of exponential distribution, the probability density function (PDF):</p>

\[f(x; \lambda) =
\begin{cases}
    \lambda e^{-\lambda x} &amp; \text{if } x \ge  0 \\
    0 &amp; \text{if } x &lt; 0 
  \end{cases}\]

<p>Here $\lambda$ &gt; 0 is the parameter of the distribution, often called the <em>rate parameter</em>. The distribution is supported on the interval [0, $\infty$). If a <a href="https://en.wikipedia.org/wiki/Random_variable">random variable</a> <em>X</em> has this distribution, we write $X \sim \rm{Exp}(\lambda)$.</p>

<p>The cumulative distribution function:</p>

\[F(x; \lambda) =
\begin{cases}
    1 -  e^{-\lambda x} &amp; \text{if } x \ge  0 \\
    0 &amp; \text{if } x &lt; 0 
  \end{cases}\]

<p>The CDF and PDF are not the actual probability. For continuous probability distribution, we only compute the probability of a given interval instead of one single point. Because the probability $P(a \le x \le b)$ is the integral of PDF values in the range of $[a, b]$ and the area under a single point is infinitesimally small. The CDF is the integral of PDF, we can simple compute the probability as:</p>

\[P(a \le x \le b) = F(b) - F(a)\]

<p>where $F(x)$ is the CDF of $x$.</p>

<p>Property:</p>

<ul>
  <li><strong>Mean</strong>: $\frac{1}{\lambda}$</li>
  <li><strong>Variance</strong>: $\frac{1}{\lambda^2}$‚Äã</li>
  <li><strong>Memoryless</strong>: The exponential distribution and the <a href="https://en.wikipedia.org/wiki/Geometric_distribution">geometric distribution</a> are <a href="https://en.wikipedia.org/wiki/Memorylessness">the only memoryless probability distributions</a>.</li>
</ul>

<hr />

<h2 id="poisson-process">Poisson Process</h2>

<p>Let $\lambda &gt; 0$ be fixed. The counting process ${N(t), t \in [0, \infty)}$ is called a Poisson Process with <strong>rate $\lambda$</strong> if all the following conditions hold:</p>

<ul>
  <li>$N(0) = 0$;</li>
  <li>$N(t)$‚Äã has <strong>independent increments</strong>;</li>
  <li>The number of arrivals in any interval of length $\tau &gt; 0$ has $\rm{Poisson}(\lambda \tau)$ distribution.</li>
</ul>

<p>Note that from the above definition, we conclude that in a Poisson process, the distribution of the number of arrivals in any interval <strong>depends only on</strong> the length of the interval, <strong>and not on</strong> the exact location of the interval on the real line. Therefore the <em>Poisson process has stationary increments</em>.</p>

<p>We denote $X_1$ as the interval of the first arrival, the $T_1$ is the time instant of first arrival.</p>

<p><img src="/assets/img/posts/2024.06.17/Poisson-interarrival.png" alt="Arrivals" style="zoom:50%;" /></p>

<p>If $N(t)$ is a Poisson process with rate $\lambda$, then the. interarrival times $X_1, X_2, \dots$ are independent and</p>

\[X_i \sim \rm{Exponential(\lambda)}\]

<p>$X$ is a memoryless random variable, that is</p>

\[P(X &gt; x + a | X &gt; a) = P(X &gt; x)\]

<p>Thinking of the Poisson process, the memoryless property of the interarrival times <strong>is consistent with the independent increment property of the Poisson distribution</strong>. In some sense, both are implying that the number of arrivals in non-overlapping intervals are independent.</p>

<p>Since the arrival time can be derived by:</p>

<p>\(\begin{align}
T_1 =X_1 \\
T_2 =X_1 + X_2 \\
T_3 =X_1 + X_2 + X_3
\end{align}\)
More specifically, $T_n$ is the sum of $n$ independent $\rm{Exponential}(\lambda)$ random variables. Then $T_n \sim \rm{Gamma(n, \lambda)}$. Note that here $n \in \mathbb{N}$. The $\rm{Gamma(n, \lambda)}$‚Äã is also called <strong>Erlang</strong> distribution, i.e, we can write</p>

\[T_n \sim \rm{Erlang}(n, \lambda) =  \rm{Gamma(n, \lambda)}\]

<p>The PDF of $T_n$, for $n = 1, 2, 3, \dots$, is given by</p>

\[f_{T_n}(t) = \frac{\lambda^nt^{n-1} e^{-\lambda t}}{(n-1)!}\]

<p>and</p>

\[E(T_n) = \frac{n}{\lambda} \\
Var(T_n) = \frac{n}{\lambda^2}\]

<hr />

<h2 id="markov-chain">Markov Chain</h2>

<p>Given the past states $X_0, X_1, \dots, X_n-1$ and the current state $X_n$, a Markov chain is a stochastic process, where the conditional distribution of any future state $X_{n+1}$ is independent of the <strong>past states</strong> and depends solely on <strong>current state</strong>. The $P_{ij}$ represents the probability of the process transiting from state $i$ to $j$, and the one-step transition matrix is a 2D matrix containing all possible probability of states transition. The multiple step transition can be obtained by the <strong>Chapman-Kolmogorov Equations</strong>:</p>

\[P^{n+m}_{ij} = \sum_{k=0}^{\infty} P_{ik}^n P_{kj}^m\]

<p>Two states $i$ and $j$ that are accessible to each other are called to <strong>communicate</strong>. For any state, the process can never change since once entered is an <strong>absorbing state</strong>. Two states that communicate with each other are said to be in the same <strong>class</strong>, each state class is separate with another one. The Markov chain is <strong>irreducible</strong> if there is only one class (i.e., all states communicate with each other).</p>

<h3 id="limiting-probabilities">Limiting Probabilities</h3>

<p>For an irreducible ergodic Markov (one class) chain $\lim_{n \rightarrow \infty} P^n_{ij}$ exists and is independent of $i$. It shows the limiting probability that the process will be in state $j$ at time $n$, which <strong>equals to the long-run proportion of time that the process will be in state $j$</strong>.</p>

<h3 id="mean-time-spent-in-transient-states">Mean Time Spent in Transient States</h3>

<p>Considering a finite state Markov chain with states in range $T={1, 2, \dots, t}$, the transition probabilities matrix is a $t \times t$ matrix $P_T$. We denote the identity matrix as $I$. For transient state $i, j$, let $s_{ij}$ denotes the expected <strong>number of time periods</strong> that the Markov chain is in state $j$, given it starts from state $i$. The matrix format for transient state times is $S$, we have:</p>

\[S = (I - P_T)^{-1}\]

<p>For each element, we can also compute the transition probability $f_{ij}$ from state $i$ to state $j$:</p>

\[f_{ij} = \frac{s_{ij} - \delta_{ij}}{s_{jj}}\]

<p>Where $\delta_{ij}$ is the corresponding element in identity matrix.</p>]]></content><author><name></name></author><category term="math," /><category term="statistics" /><category term="Math" /><summary type="html"><![CDATA[probability, statistics, random variables, discrete and continuous.]]></summary></entry><entry><title type="html">Some thinking about concurrent programming</title><link href="https://kobehub.github.io/blog/2023/thinking-about-concurrency/" rel="alternate" type="text/html" title="Some thinking about concurrent programming" /><published>2023-02-24T10:00:00+00:00</published><updated>2023-02-24T10:00:00+00:00</updated><id>https://kobehub.github.io/blog/2023/thinking-about-concurrency</id><content type="html" xml:base="https://kobehub.github.io/blog/2023/thinking-about-concurrency/"><![CDATA[<p>In last two weeks, I started to reuse Rust language, the dedicated and a little bit complicated tool with enormous magic. Actually, I admire Rust‚Äôs philosophy and vision a lot, which concerns safety and efficiency and tries to strke a subtle balance between simplicity and power.</p>

<p>One of the most intriguing parts of Rust is asynchronous programming, or async in short. The keywords <code class="language-plaintext highlighter-rouge">async/await</code> are not original invention of Rust, an increasing number of programming languages are supporting a concurrent programming model. It lets us run a large number of concurrent tasks on a small number of OS threads, while preserving much of the look and feel of ordinary synchronous programming.</p>

<p>In this post, I am going to sumarize some reading and thinking about async recently.</p>

<h2 id="1-async-vs-other-concurrency-models">1. Async vs other concurrency models</h2>

<p>Here is a brief overview of the most popular concurrency models can help us understand how asynchronous programming fits within the broader field of concurrent programming:</p>

<ul>
  <li><strong>OS threads</strong> don‚Äôt require any changes to the programming model, which makes it very easy to express concurrency. However, synchronizing between threads can be difficult, and the performance overhead is large. Thread pools can mitigate some of these costs, but not enough to support massive IO-bound workloads.</li>
  <li><strong>Event-driven programming</strong>, in conjunction with <em>callbacks</em>, can be very performant, but tends to result in a verbose, ‚Äúnon-linear‚Äù control flow. Data flow and error propagation is often hard to follow.</li>
  <li><strong>Coroutines</strong>, like threads, don‚Äôt require changes to the programming model, which makes them easy to use. Like async, they can also support a large number of tasks. However, they abstract away low-level details that are important for systems programming and custom runtime implementors.</li>
  <li><strong>The actor model</strong> divides all concurrent computation into units called actors, which communicate through fallible message passing, much like in distributed systems. The actor model can be efficiently implemented, but it leaves many practical issues unanswered, such as flow control and retry logic.</li>
  <li><strong>async/await</strong> has high efficiency and support low-level custom implementors with the ability to support normal programming model. However, innner implementation of async/await is tricky and comlicated which is hard to understand for normal users, compared with threads and coroutines.</li>
</ul>

<p>The goods news is Rust maintainers and the community has devoted greate energy in building an easy-used concurrency model for us. It consists of two parts:</p>

<ul>
  <li><strong>Multi-thread standard library</strong> provides the basic ability to utilize system threads, which is very straightforward and clear.</li>
  <li><strong>Async/await</strong> are supported by language features + STL + third-part library.</li>
</ul>

<p><strong>CPU bound and I/O bound</strong></p>

<p>A program is <strong>CPU bound</strong> if it would go faster if the CPU were faster, i.e. it spends the majority of its time simply using the CPU (doing calculations). <strong>A program that computes new digits of œÄ</strong> will typically be CPU-bound, it‚Äôs just crunching numbers. We also call CPU-bound tasks as computing-intensive tasks. Actually, we need to utilize the advantage of <strong>parallel programming</strong> to address cpu-bound tasks. When we have to get into massive calculations, it is important to know how to divide the job and get it done by more than one of available cores at once, <strong>in parallel</strong>.</p>

<p>A program is <strong>I/O bound</strong> if it would go faster if the I/O subsystem was faster. Which exact I/O system is meant can vary; I typically associate it with the disk, but of course, networking or communication, in general, is common too. <strong>A program that looks through a huge file for some data might become I/O bound since the bottleneck is then the reading of the data from disk</strong> (actually, this example is perhaps kind of old-fashioned these days with hundreds of MB/s coming in from SSDs).</p>

<p>So, we need to choose different solutions while encoutering different tasks.</p>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">async</code> models are preferred with I/O bound tasks.</p>
  </li>
  <li>
    <p>If the task consist of IO bound and CPU bound tasks, we choose multiple threads. In most cases, a thread-pool is necessary to reduce the overhead of construction and release of native thread.</p>
  </li>
  <li>
    <p>If CPU bound tasks occupies a larger part, like parallel computing, a multi-thread model is preferred and the number of threads should be a little bit more than CPU cores.</p>
  </li>
  <li>
    <p>If there are not any specific restrictions, use threads to reduce runtime overhead.</p>
  </li>
</ul>]]></content><author><name></name></author><category term="Rust," /><category term="programming" /><category term="Rust" /><summary type="html"><![CDATA[async and await, thread in Rust.]]></summary></entry><entry><title type="html">C++ Preprocess Directives</title><link href="https://kobehub.github.io/blog/2023/macro-preprocess/" rel="alternate" type="text/html" title="C++ Preprocess Directives" /><published>2023-02-16T10:00:00+00:00</published><updated>2023-02-16T10:00:00+00:00</updated><id>https://kobehub.github.io/blog/2023/macro-preprocess</id><content type="html" xml:base="https://kobehub.github.io/blog/2023/macro-preprocess/"><![CDATA[<p>I have recently joined a company that specializes in Quantitative Trading, where the primary languages used for development are C++ and Rust. Although I have not had prior experience working on a commercial C++ program, I wanted to share my recent encounter with C++ preprocess directives in this post.</p>

<h2 id="1-include-and-include_next">1. #include and #include_next</h2>

<p>#include is the most common-used directive in c/c++. It just searches the file and add targeted file‚Äôs content to current file. Normally, we include all header files(.h and .hpp) in our source files (.cc, .cpp, .cxx). Basic usage:‚àû</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;path-spec&gt;</span><span class="cp">
#include</span> <span class="cpf">"path-spec"</span><span class="cp">
</span></code></pre></div></div>

<p>The <em>path-spec</em> is a file name that may optionally be preceded by a directory specification. The file name must name an existing file. The syntax of the <em>path-spec</em> depends on the operating system on which the program is compiled.</p>

<p><code class="language-plaintext highlighter-rouge">#include_next</code> is a supportive directive in GUN c++. <code class="language-plaintext highlighter-rouge">#include_next</code> does not distinguish between &lt;file&gt; and ‚Äúfile‚Äù inclusion, nor does it check that the file you specify has the same name as the current file. It simply looks for the file named, starting with the directory in the search path after the one where the current file was found.</p>

<p>The use of `#include_next‚Äô can lead to great confusion. We recommend it be used only when there is no other alternative. In particular, it should not be used in the headers belonging to a specific program; it should be used only to make global corrections along the lines of fixincludes.</p>

<p>Here are some scenarios we can use <code class="language-plaintext highlighter-rouge">#include_next</code>:</p>

<ul>
  <li>
    <p>If we want to replace a default header with our own making. If we want to replace <code class="language-plaintext highlighter-rouge">stblib.h</code>, we create a new file in our project and it contains a header ‚Äústdlib.h‚Äù. We can create a our lib in this way.</p>

    <div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include_next "stdlib.h"
</span><span class="kt">int</span> <span class="nf">my_lib_func</span><span class="p">();</span>
</code></pre></div>    </div>

    <p>And the compiler will not include <em>your</em> stdlib.h again recursively, as would be the case with plain a #include, but rather continue in other directories for a file named ‚Äústdlib.h‚Äù.</p>
  </li>
  <li>
    <p>It‚Äôs handy if you‚Äôre supporting multiple versions of something. For example, I‚Äôm writing code that supports PostgreSQL 9.4 and 9.6. A number of internal API changes exist, mostly new arguments to existing functions. We can use the most up-to-date version header with <code class="language-plaintext highlighter-rouge">#include_next</code>.</p>
  </li>
</ul>

<h2 id="2-define-and-undef">2. #define and #undef</h2>

<p>The <strong>#define</strong> creates a <em>macro</em>, which is the association of an identifier or parameterized identifier with a token string. After the macro is defined, the compiler can substitute the token string for each occurrence of the identifier in the source file.</p>

<p>The <strong>#define</strong> directive causes the compiler to substitute <em>token-string</em> for each occurrence of <em>identifier</em> in the source file. The <em>identifier</em> is replaced only when it forms a token. That is, <em>identifier</em> is not replaced if it appears in a comment, in a string, or as part of a longer identifier.</p>

<p>One or more white-space characters must separate <em>token-string</em> from <em>identifier</em>. This white space is not considered part of the substituted text, nor is any white space that follows the last token of the text. But any token after token string will use to replace text;</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#define TEST 3;
</span><span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">+</span> <span class="n">TEST</span> <span class="c1">// a = 1 + 3;</span>
</code></pre></div></div>

<p>A <code class="language-plaintext highlighter-rouge">#define</code> without a <em>token-string</em> removes occurrences of <em>identifier</em> from the source file. The <em>identifier</em> remains defined and can be tested by using the <code class="language-plaintext highlighter-rouge">#if defined</code> and <code class="language-plaintext highlighter-rouge">#ifdef</code> directives.</p>

<p>The second syntax form defines a function-like macro with parameters. This form accepts an optional list of parameters that must appear in parentheses. After the macro is defined, each subsequent occurrence of <em>identifier</em>( <em>identifier</em>opt, ‚Ä¶, <em>identifier</em>opt ) is replaced with a version of the <em>token-string</em> argument that has actual arguments substituted for formal parameters.</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#define max(a,b) ( (a) &gt; (b) ? (a) : (b) )    // We need to add parentheses to each argument to ensure expression is correct.
</span><span class="kt">int</span> <span class="n">m</span> <span class="o">=</span> <span class="mi">3</span><span class="p">,</span> <span class="n">n</span> <span class="o">=</span> <span class="mi">4</span><span class="p">;</span>
<span class="kt">int</span> <span class="n">c</span> <span class="o">=</span> <span class="n">max</span><span class="p">(</span> <span class="n">m</span><span class="p">,</span> <span class="n">n</span> <span class="p">);</span>   
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">#undef</code> removes one identifier‚Äôs defination.</p>

<h2 id="3-conditions-if-ifdef">3. Conditions: #if, #ifdef</h2>

<p>There is a series of preprocess directives to control workflow. Conditional directives are mostly used in standard libraries to detect platforms and environment.</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#if constant-expression  // #ifdef or #ifndef
</span>      <span class="n">code</span>
<span class="cp">#elif constant-expression
</span>      <span class="n">code</span>
<span class="cp">#else
</span>      <span class="n">code</span>
<span class="cp">#endif
</span></code></pre></div></div>

<p>The <em>constant-expression</em> is an integer constant expression with these additional restrictions:</p>

<ul>
  <li>Expressions must have integral type and can include only integer constants, character constants, and the <strong>defined</strong> operator.</li>
  <li>The expression can‚Äôt use <strong><code class="language-plaintext highlighter-rouge">sizeof</code></strong> or a type-cast operator.</li>
  <li>The target environment may be unable to represent all ranges of integers.</li>
  <li>The translation represents type <strong><code class="language-plaintext highlighter-rouge">int</code></strong> the same way as type <strong><code class="language-plaintext highlighter-rouge">long</code></strong>, and <strong><code class="language-plaintext highlighter-rouge">unsigned int</code></strong> the same way as <strong><code class="language-plaintext highlighter-rouge">unsigned long</code></strong>.</li>
  <li>The translator can translate character constants to a set of code values different from the set for the target environment. To determine the properties of the target environment, use an app built for that environment to check the values of the <em>LIMITS.H</em> macros.</li>
  <li>The expression must not query the environment, and must remain insulated from implementation details on the target computer.</li>
</ul>

<p>In the following example, the <strong>#if</strong> and <strong>#endif</strong> directives control compilation of one of three function calls:</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#if defined(CREDIT)
</span>    <span class="n">credit</span><span class="p">();</span>
<span class="cp">#elif defined(DEBIT)
</span>    <span class="n">debit</span><span class="p">();</span>
<span class="cp">#else
</span>    <span class="n">printerror</span><span class="p">();</span>
<span class="cp">#endif
</span></code></pre></div></div>

<p>The conditional compilation statements in the following example assume a previously defined symbolic constant named <code class="language-plaintext highlighter-rouge">DLEVEL</code>.</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#if DLEVEL &gt; 5
</span>    <span class="cp">#define SIGNAL  1
</span>    <span class="cp">#if STACKUSE == 1
</span>        <span class="cp">#define STACK   200
</span>    <span class="cp">#else
</span>        <span class="cp">#define STACK   100
</span>    <span class="cp">#endif
#else
</span>    <span class="cp">#define SIGNAL  0
</span>    <span class="cp">#if STACKUSE == 1
</span>        <span class="cp">#define STACK   100
</span>    <span class="cp">#else
</span>        <span class="cp">#define STACK   50
</span>    <span class="cp">#endif
#endif
#if DLEVEL == 0
</span>    <span class="cp">#define STACK 0
#elif DLEVEL == 1
</span>    <span class="cp">#define STACK 100
#elif DLEVEL &gt; 5
</span>    <span class="n">display</span><span class="p">(</span> <span class="n">debugptr</span> <span class="p">);</span>
<span class="cp">#else
</span>    <span class="cp">#define STACK 200
#endif
</span></code></pre></div></div>

<h2 id="4-pragma">4. #pragma</h2>

<p>Pragma directives specify machine-specific or operating system-specific compiler features. A line that starts with <code class="language-plaintext highlighter-rouge">#pragma</code> specifies a pragma directive.</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#pragma token-string
</span><span class="n">__pragma</span><span class="p">(</span> <span class="n">token</span><span class="o">-</span><span class="n">string</span> <span class="p">)</span> <span class="c1">// two leading underscores - Microsoft-specific extension</span>
<span class="n">_Pragma</span><span class="p">(</span> <span class="n">string</span><span class="o">-</span><span class="n">literal</span> <span class="p">)</span> <span class="c1">// C99</span>
</code></pre></div></div>

<p>Each implementation of C and C++ supports some features unique to its host machine or operating system. Some programs, for example, must exercise precise control over the location of data in memory, or control the way certain functions receive parameters. The <strong><code class="language-plaintext highlighter-rouge">#pragma</code></strong> directives offer a way for each compiler to offer machine- and operating system-specific features, while maintaining overall compatibility with the C and C++ languages.</p>

<h3 id="41-pragma-region">4.1 #pragma region</h3>

<p>This directive specifies the packing alignment for structure, union and class members.</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">#pragma pack(show)</code>: shows current byte value for packing alignment. The value is displayed by a warning message.</li>
  <li><code class="language-plaintext highlighter-rouge">#pragma pack(push, n)</code>: pushes the current packimg alignment value to internal compiler stack and set current packing alignment to <code class="language-plaintext highlighter-rouge">n</code>. If n is not specified, current packing alignment value is pushed.</li>
  <li><code class="language-plaintext highlighter-rouge">#pragma pack(pop, n)</code>: Removes the record from the top of internal compiler stack. If <code class="language-plaintext highlighter-rouge">n</code> isn‚Äôt specified with <code class="language-plaintext highlighter-rouge">pop</code>, then current packing alignment value is the top of the stack. If <code class="language-plaintext highlighter-rouge">n</code> is specified, <code class="language-plaintext highlighter-rouge">n</code> becomes the new packing alignment value.</li>
  <li><code class="language-plaintext highlighter-rouge">#pragma pack(n)</code>: specifies the packing alignment value. The default value is 8, available values include 1, 2, 4, 8, and 16. The alignment of a member is on a boundary that‚Äôs either a multiple of <em><code class="language-plaintext highlighter-rouge">n</code></em>, or a multiple of the size of the member, whichever is smaller.</li>
</ul>

<p>As for the push and pop, we can also assign one identifier to it. If you pop using an <em><code class="language-plaintext highlighter-rouge">identifier</code></em>, for example, <code class="language-plaintext highlighter-rouge">#pragma pack(pop, r1)</code>, then all records on the stack are popped until the record that has <em><code class="language-plaintext highlighter-rouge">identifier</code></em> is found. That record gets popped, and the packing value associated with the record found on the top of the stack becomes the new packing alignment value. If you pop using an <em><code class="language-plaintext highlighter-rouge">identifier</code></em> that isn‚Äôt found in any record on the stack, then the <strong><code class="language-plaintext highlighter-rouge">pop</code></strong> is ignored.</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// pragma_directives_pack_2.cpp</span>
<span class="c1">// compile with: /W1 /c</span>
<span class="cp">#pragma pack()   // n defaults to 8; equivalent to /Zp8
#pragma pack(show)   // C4810
#pragma pack(4)   // n = 4
#pragma pack(show)   // C4810
#pragma pack(push, r1, 16)   // n = 16, pushed to stack
#pragma pack(show)   // C4810
</span>
<span class="c1">// pop to the identifier and then set</span>
<span class="c1">// the value of the current packing alignment:</span>
<span class="cp">#pragma pack(pop, r1, 2)   // n = 2 , stack popped
#pragma pack(show)   // C4810
</span></code></pre></div></div>

<h3 id="41-pragma-once">4.1 <code class="language-plaintext highlighter-rouge">#pragma once</code></h3>

<p>This directive specifies that the compiler includes this header file only once, while compiling a source file.</p>

<p>The use of <code class="language-plaintext highlighter-rouge">#pragma once</code> can reduce build times, as the compiler won‚Äôt open and read the file again after the first <code class="language-plaintext highlighter-rouge">#include</code> of the file in the translation unit. It‚Äôs called the <em>multiple-include optimization</em>. We can also use include guard idiom, which puts around the entirety of the header file:</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// point.hpp</span>
<span class="cp">#ifndef MYPROJECT_POINT_HPP_GUARD
#define MYPROJECT_POINT_HPP_GUARD
</span><span class="k">struct</span> <span class="nc">point</span> <span class="p">{</span>
    <span class="kt">int</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">;</span>
<span class="p">};</span>
<span class="cp">#endif
</span></code></pre></div></div>

<p>We recommend the <code class="language-plaintext highlighter-rouge">#pragma once</code> directive for new code because it doesn‚Äôt pollute the global namespace with a preprocessor symbol. It requires less typing, it‚Äôs less distracting, and it can‚Äôt cause <em>symbol collisions</em>. Symbol collisions are errors caused when different header files use the same preprocessor symbol as the guard value. It isn‚Äôt part of the C++ Standard, but it‚Äôs implemented portably by several common compilers.</p>

<h2 id="5-_attribute_">5. _<em>attribute_</em></h2>

<h2 id="6-__declspec">6. __declspec</h2>]]></content><author><name></name></author><category term="cpp," /><category term="programming" /><category term="cpp" /><summary type="html"><![CDATA[Common-used preprocess directives in c++.]]></summary></entry><entry><title type="html">Build develop environment on a new mac</title><link href="https://kobehub.github.io/blog/2023/build-mac-dev/" rel="alternate" type="text/html" title="Build develop environment on a new mac" /><published>2023-02-10T17:00:00+00:00</published><updated>2023-02-10T17:00:00+00:00</updated><id>https://kobehub.github.io/blog/2023/build-mac-dev</id><content type="html" xml:base="https://kobehub.github.io/blog/2023/build-mac-dev/"><![CDATA[<p>I have an intention to collect all my configure files and procedures into a script for a long time. I‚Äôve bought a new Macbook Air M1 this year whose configuration is a little different from Linux. Basically, I need my favorite tools installed on my devices, including <a href="https://github.com/alacritty/alacritty" target="_blank">Alacritty</a>, <a href="https://github.com/tmux/tmux/wiki" target="_blank">tmux</a>, <a href="https://github.com/neovim/neovim" target="_blank">Neovim</a>, <a href="https://github.com/yichengchen/clashX/releases">clashX</a>. Other tools like brew, xcode-select and iterm2 are also necessary.</p>

<p>Since I am in China now, I will attach mirrors for quick installations.</p>

<h2 id="1-package-manager">1. Package manager</h2>

<h3 id="official-installation">Official installation</h3>

<p>First of all, we need to get the famous package manger ‚Äì <a href="https://brew.sh/">Homebrew</a>, which is very simple:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/bin/bash <span class="nt">-c</span> <span class="s2">"</span><span class="si">$(</span>curl <span class="nt">-fsSL</span> https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh<span class="si">)</span><span class="s2">"</span>
</code></pre></div></div>

<h3 id="install-from-mirror">Install from mirror</h3>

<ol>
  <li>In order to use the tuna‚Äôs mirror, we need to export following environment variables to our shell:</li>
</ol>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">export </span><span class="nv">HOMEBREW_INSTALL_FROM_API</span><span class="o">=</span>1
<span class="nb">export </span><span class="nv">HOMEBREW_API_DOMAIN</span><span class="o">=</span><span class="s2">"https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles/api"</span>
<span class="nb">export </span><span class="nv">HOMEBREW_BOTTLE_DOMAIN</span><span class="o">=</span><span class="s2">"https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles"</span>
<span class="nb">export </span><span class="nv">HOMEBREW_BREW_GIT_REMOTE</span><span class="o">=</span><span class="s2">"https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/brew.git"</span>
<span class="nb">export </span><span class="nv">HOMEBREW_CORE_GIT_REMOTE</span><span class="o">=</span><span class="s2">"https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-core.git"</span>
</code></pre></div></div>

<ol>
  <li>After that, get script from tuna mirrors:</li>
</ol>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git clone <span class="nt">--depth</span><span class="o">=</span>1 https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/install.git brew-install <span class="o">&amp;&amp;</span> /bin/bash brew-install/install.sh <span class="o">&amp;&amp;</span> <span class="nb">rm</span> <span class="nt">-rf</span> brew-install
</code></pre></div></div>

<ol>
  <li>For Apple Silicon CPU devices, we need to add shell env manually,</li>
</ol>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">test</span> <span class="nt">-r</span> ~/.bash_profile <span class="o">&amp;&amp;</span> <span class="nb">echo</span> <span class="s1">'eval "$(/opt/homebrew/bin/brew shellenv)"'</span> <span class="o">&gt;&gt;</span> ~/.bash_profile
<span class="nb">test</span> <span class="nt">-r</span> ~/.zprofile <span class="o">&amp;&amp;</span> <span class="nb">echo</span> <span class="s1">'eval "$(/opt/homebrew/bin/brew shellenv)"'</span> <span class="o">&gt;&gt;</span> ~/.zprofile
</code></pre></div></div>

<h3 id="replace-upstream">Replace upstream</h3>

<p>If we already have brew installed on our mac and want to replace the upstream source to Chinese mirrors, we can set <code class="language-plaintext highlighter-rouge">HOMEBREW_API_DOMAIN</code> and <code class="language-plaintext highlighter-rouge">HOMEBREW_BREW_GIT_REMOTE</code> in our <code class="language-plaintext highlighter-rouge">~/.zshrc</code>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">export </span><span class="nv">HOMEBREW_API_DOMAIN</span><span class="o">=</span><span class="s2">"https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles/api"</span>
<span class="nb">export </span><span class="nv">HOMEBREW_BREW_GIT_REMOTE</span><span class="o">=</span><span class="s2">"https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/brew.git"</span>
brew update
</code></pre></div></div>

<h3 id="reset-upstream">Reset upstream</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">unset </span>HOMEBREW_BREW_GIT_REMOTE
git <span class="nt">-C</span> <span class="s2">"</span><span class="si">$(</span>brew <span class="nt">--repo</span><span class="si">)</span><span class="s2">"</span> remote set-url origin https://github.com/Homebrew/brew

<span class="nb">unset </span>HOMEBREW_API_DOMAIN
<span class="nb">unset </span>HOMEBREW_CORE_GIT_REMOTE
<span class="nv">BREW_TAPS</span><span class="o">=</span><span class="s2">"</span><span class="si">$(</span><span class="nv">BREW_TAPS</span><span class="o">=</span><span class="s2">"</span><span class="si">$(</span>brew tap 2&gt;/dev/null<span class="si">)</span><span class="s2">"</span><span class="p">;</span> <span class="nb">echo</span> <span class="nt">-n</span> <span class="s2">"</span><span class="k">${</span><span class="nv">BREW_TAPS</span><span class="p">//</span><span class="s1">$'</span><span class="se">\n</span><span class="s1">'</span><span class="p">/</span>:<span class="k">}</span><span class="s2">"</span><span class="si">)</span><span class="s2">"</span>
<span class="k">for </span>tap <span class="k">in </span>core cask<span class="o">{</span>,-fonts,-drivers,-versions<span class="o">}</span> command-not-found<span class="p">;</span> <span class="k">do
    if</span> <span class="o">[[</span> <span class="s2">":</span><span class="k">${</span><span class="nv">BREW_TAPS</span><span class="k">}</span><span class="s2">:"</span> <span class="o">==</span> <span class="k">*</span><span class="s2">":homebrew/</span><span class="k">${</span><span class="nv">tap</span><span class="k">}</span><span class="s2">:"</span><span class="k">*</span> <span class="o">]]</span><span class="p">;</span> <span class="k">then
        </span>brew tap <span class="nt">--custom-remote</span> <span class="s2">"homebrew/</span><span class="k">${</span><span class="nv">tap</span><span class="k">}</span><span class="s2">"</span> <span class="s2">"https://github.com/Homebrew/homebrew-</span><span class="k">${</span><span class="nv">tap</span><span class="k">}</span><span class="s2">"</span>
    <span class="k">fi
done</span>
</code></pre></div></div>

<p><strong>Note: if we need to reset upstream, we also need to remove env variables <code class="language-plaintext highlighter-rouge">HOMEBREW_BREW_GIT_REMOTE</code> and <code class="language-plaintext highlighter-rouge">HOMEBREW_CORE_GIT_REMOTE</code> in profiles before executing <code class="language-plaintext highlighter-rouge">brew update</code>.</strong></p>

<h2 id="2-install-tools">2. Install tools</h2>

<h3 id="xcode-select">xcode-select</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>xcode-select <span class="nt">--install</span>
</code></pre></div></div>

<p>We can also download from <a href="https://developer.apple.com/download/all/?q=xcode">apple developer site</a>, and select the corresponding version of <strong>Command LIne Tools for Xcode.</strong></p>

<h3 id="necessary-tools">Necessary tools</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>brew <span class="nb">install </span>autoconf brotli c-ares ca-certificates clang-format cmake efm-langserver <span class="se">\</span>
gettext go icu4c libevent libnghttp2 libtermkey libuv libvterm libyaml luajit <span class="se">\</span>
luv m4 make mpdecimal msgpack ncurses neovim node python <span class="se">\</span>
rbenv ruby ruby-build rust sqlite the_silver_searcher tmux tmux-mem-cpu-load tree-sitter zsh <span class="se">\</span>
alacritty font-hack-nerd-font font-meslo-lg-nerd-font iterm2 visual-studio-code
</code></pre></div></div>

<h3 id="git-config">Git config</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git config <span class="nt">--global</span> user.name <span class="s2">""</span>
git config <span class="nt">--global</span> user.email <span class="s2">""</span>
git config <span class="nt">--global</span> core.editor nvim
git config <span class="nt">--global</span> core.autocrlf <span class="nb">false
</span>git config <span class="nt">--global</span> http.sslverify <span class="nb">false</span>

// For mirros <span class="nb">users
</span>git config <span class="nt">--global</span> url.<span class="s2">"https://github.com.cnpmjs.org/"</span>.insteadOf https://github.com/
git config <span class="nt">--global</span> url.<span class="s2">"git@git.zhlh6.cn"</span>.insteadOf git@github.com
</code></pre></div></div>

<h3 id="generate-a-new-ssh-key">Generate a new SSH key</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ssh-keygen <span class="nt">-t</span> rsa <span class="nt">-b</span> 4096 <span class="nt">-C</span> <span class="s2">"xxx@gmail.com"</span>
</code></pre></div></div>

<h3 id="test-our-ssh-connection">Test our SSH connection</h3>

<p>After we add our SSH key to github we can test it.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>// ssh <span class="nt">-T</span> git@HOSTNAME
ssh <span class="nt">-T</span> git@github.com
</code></pre></div></div>

<h2 id="3-shell-configuration">3. Shell configuration</h2>

<h3 id="fonts">Fonts</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>brew tap homebrew/cask-fonts
brew <span class="nb">install </span>font-hack-nerd-font
brew tap homebrew/cask-fonts <span class="o">&amp;&amp;</span> brew <span class="nb">install</span> <span class="nt">--cask</span> font-meslo-lg-nerd-font
</code></pre></div></div>

<h3 id="oh-my-zsh-and-powerline-10k">oh-my-zsh and powerline 10K</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sh <span class="nt">-c</span> <span class="s2">"</span><span class="si">$(</span>curl <span class="nt">-fsSL</span> https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh<span class="si">)</span><span class="s2">"</span>
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git clone <span class="nt">--depth</span><span class="o">=</span>1 https://github.com/romkatv/powerlevel10k.git <span class="k">${</span><span class="nv">ZSH_CUSTOM</span><span class="k">:-</span><span class="nv">$HOME</span><span class="p">/.oh-my-zsh/custom</span><span class="k">}</span>/themes/powerlevel10k
</code></pre></div></div>

<p><strong>China mirrors:</strong></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sh <span class="nt">-c</span> <span class="s2">"</span><span class="si">$(</span>curl <span class="nt">-fsSL</span> https://gitee.com/mirrors/oh-my-zsh/raw/master/tools/install.sh<span class="si">)</span><span class="s2">"</span>
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git clone <span class="nt">--depth</span><span class="o">=</span>1 https://gitee.com/romkatv/powerlevel10k.git <span class="k">${</span><span class="nv">ZSH_CUSTOM</span><span class="k">:-</span><span class="nv">$HOME</span><span class="p">/.oh-my-zsh/custom</span><span class="k">}</span>/themes/powerlevel10k
</code></pre></div></div>

<p>Set <code class="language-plaintext highlighter-rouge">ZSH_THEME="powerlevel10k/powerlevel10k"</code> in <code class="language-plaintext highlighter-rouge">~/.zshrc</code></p>

<h3 id="zsh-plugins">zsh plugins</h3>

<ul>
  <li>
    <p><strong>zsh-autosuggestions</strong></p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git clone https://github.com/zsh-users/zsh-autosuggestions <span class="k">${</span><span class="nv">ZSH_CUSTOM</span><span class="k">:-</span><span class="p">~/.oh-my-zsh/custom</span><span class="k">}</span>/plugins/zsh-autosuggestions
</code></pre></div>    </div>
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git clone https://gitee.com/githubClone/zsh-autosuggestions <span class="k">${</span><span class="nv">ZSH_CUSTOM</span><span class="k">:-</span><span class="p">~/.oh-my-zsh/custom</span><span class="k">}</span>/plugins/zsh-autosuggestions
</code></pre></div>    </div>
  </li>
  <li>
    <p><strong>zsh-syntax-highlighting</strong></p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git clone https://github.com/zsh-users/zsh-syntax-highlighting.git <span class="k">${</span><span class="nv">ZSH_CUSTOM</span><span class="k">:-</span><span class="p">~/.oh-my-zsh/custom</span><span class="k">}</span>/plugins/zsh-syntax-highlighting
</code></pre></div>    </div>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git clone https://gitee.com/mirror-github/zsh-syntax-highlighting <span class="k">${</span><span class="nv">ZSH_CUSTOM</span><span class="k">:-</span><span class="p">~/.oh-my-zsh/custom</span><span class="k">}</span>/plugins/zsh-syntax-highlighting
</code></pre></div>    </div>
  </li>
</ul>

<p>Addd plugins to <code class="language-plaintext highlighter-rouge">.zshrc</code> <code class="language-plaintext highlighter-rouge">plugins=(git zsh-syntax-highlighting zsh-autosuggestions)</code></p>

<h3 id="alacritty-config">Alacritty config</h3>

<p>Override configuration file of Alacritty in <code class="language-plaintext highlighter-rouge">~/.config/alacritty/alacritty.yaml</code></p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Font configuration (changes require restart)</span>
<span class="na">font</span><span class="pi">:</span>
  <span class="c1"># Normal (roman) font face</span>
  <span class="na">normal</span><span class="pi">:</span>
    <span class="na">family</span><span class="pi">:</span> <span class="s">MesloLGS NF</span>
    <span class="c1"># The `style` can be specified to pick a specific face.</span>
    <span class="na">style</span><span class="pi">:</span> <span class="s">Regular</span>

  <span class="c1"># Bold font face</span>
  <span class="na">bold</span><span class="pi">:</span>
    <span class="na">family</span><span class="pi">:</span> <span class="s">MesloLGS NF</span> <span class="c1"># or Nerd Font</span>
    <span class="na">style</span><span class="pi">:</span> <span class="s">Bold</span>
  <span class="c1"># Italic font face</span>
  <span class="na">italic</span><span class="pi">:</span>
    <span class="na">family</span><span class="pi">:</span> <span class="s">MesloLGS NF</span>
    <span class="na">style</span><span class="pi">:</span> <span class="s">Italic</span>

  <span class="c1"># Point size</span>
  <span class="na">size</span><span class="pi">:</span> <span class="m">14.0</span>

  <span class="c1"># Offset is the extra space around each character. `offset.y` can be thought of</span>
  <span class="c1"># as modifying the line spacing, and `offset.x` as modifying the letter spacing.</span>
  <span class="na">offset</span><span class="pi">:</span>
    <span class="na">x</span><span class="pi">:</span> <span class="m">0</span>
    <span class="na">y</span><span class="pi">:</span> <span class="m">0</span>

  <span class="c1"># Glyph offset determines the locations of the glyphs within their cells with</span>
  <span class="c1"># the default being at the bottom. Increasing `x` moves the glyph to the right,</span>
  <span class="c1"># increasing `y` moves the glyph upwards.</span>
  <span class="na">glyph_offset</span><span class="pi">:</span>
    <span class="na">x</span><span class="pi">:</span> <span class="m">0</span>
    <span class="na">y</span><span class="pi">:</span> <span class="m">0</span>

<span class="c1"># mods: Control|Shift|Option|Command</span>
<span class="c1"># Support for nvim Alt siwtch</span>
<span class="na">key_bindings</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="pi">{</span> <span class="nv">key</span><span class="pi">:</span> <span class="nv">J</span><span class="pi">,</span> <span class="nv">mods</span><span class="pi">:</span> <span class="nv">Alt</span><span class="pi">,</span> <span class="nv">chars</span><span class="pi">:</span> <span class="s2">"</span><span class="se">\x1b</span><span class="s">j"</span> <span class="pi">}</span>
  <span class="pi">-</span> <span class="pi">{</span> <span class="nv">key</span><span class="pi">:</span> <span class="nv">K</span><span class="pi">,</span> <span class="nv">mods</span><span class="pi">:</span> <span class="nv">Alt</span><span class="pi">,</span> <span class="nv">chars</span><span class="pi">:</span> <span class="s2">"</span><span class="se">\x1b</span><span class="s">k"</span> <span class="pi">}</span>
</code></pre></div></div>

<h3 id="iterm2-pop-up-window">Iterm2 pop-up window</h3>

<ul>
  <li>Settting -&gt; Keys -&gt; Hotkeys <strong>Create a Dedicated Hotkey Window‚Ä¶</strong></li>
  <li>Set Hotkey to <code class="language-plaintext highlighter-rouge">Ctrl+\</code></li>
</ul>

<h2 id="4-clashx">4. ClashX</h2>

<p>Release version: <a href="https://github.com/yichengchen/clashX/releases">https://github.com/yichengchen/clashX/releases</a>.</p>

<h2 id="5-neovim">5. Neovim</h2>

<p>First, we need to copy dotfile from gitee.com:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git clone git@gitee.com:kobeHub/selfdot.git <span class="nv">$HOME</span>/.config/nvim
</code></pre></div></div>

<p><strong>Make sure we have installed all the lsp servers and tools like silver searcher.</strong></p>

<p>We can install packer and plugins by <code class="language-plaintext highlighter-rouge">:PackerSync</code></p>]]></content><author><name></name></author><category term="env-build" /><category term="env" /><summary type="html"><![CDATA[clash + neovim + cpp + Rust + Python]]></summary></entry><entry><title type="html">How to write one colorful post in a few minutes?</title><link href="https://kobehub.github.io/blog/2023/write-one-post/" rel="alternate" type="text/html" title="How to write one colorful post in a few minutes?" /><published>2023-02-08T15:58:00+00:00</published><updated>2023-02-08T15:58:00+00:00</updated><id>https://kobehub.github.io/blog/2023/write-one-post</id><content type="html" xml:base="https://kobehub.github.io/blog/2023/write-one-post/"><![CDATA[<p>Recently, I migrated my personal site from Hugo to Jekyll and I was satisfied to make this change. My website seems to be silent for roughly 3 years after I entered Pinduoduo. It is the right time to bring my person page back to the earth as well as my writing habit.</p>

<p><a href="https://jekyllrb.com/" target="\_blank">Jekyll</a> is a powerful static websites and blogs generator. It takes text written in your favorite markup language and uses layouts to create a static website. You can tweak the site‚Äôs look and feel, URLs, the data displayed on the page, and more. Since I am not really familiar with all the features Jekyll has provided to write a nice post, I will summarize some common usage in this blog.</p>

<h2 id="1-how-to-use-jekyll-">1. How to use Jekyll ?</h2>

<p><strong>Prerequisites</strong></p>

<ul>
  <li>Ruby version <strong>2.5.0</strong> or higher</li>
  <li>RubyGems</li>
  <li>GCC and Make</li>
</ul>

<p><strong>Use Jekyll locally</strong></p>

<ol>
  <li>
    <p>Install all <a href="https://jekyllrb.com/docs/installation/">prerequisites</a>.</p>
  </li>
  <li>
    <p>Install the jekyll and bundler</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>gem <span class="nb">install </span>jekyll bundler
</code></pre></div>    </div>
  </li>
  <li>
    <p>Install <code class="language-plaintext highlighter-rouge">mermaid-cli</code></p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm <span class="nb">install</span> <span class="nt">-g</span> @mermaid-js/mermaid-cli
</code></pre></div>    </div>
    <p>If we cannot install chromium, we can ignore it.</p>
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">PUPPETEER_SKIP_DOWNLOAD</span><span class="o">=</span>1 npm <span class="nb">install</span> <span class="nt">-g</span> @mermaid-js/mermaid-cli
</code></pre></div>    </div>
  </li>
  <li>Serve in local environment.
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bundle <span class="nb">exec </span>jekyll serve <span class="nt">--host</span> 0.0.0.0
</code></pre></div>    </div>
  </li>
  <li>Browse to <a href="http://127.0.0.1:4000/">http://127.0.0.1:4000</a></li>
</ol>

<p>Now, we could visit and preview our blog locally before pushing contents to github pages.</p>

<h2 id="2-how-blogging-work-with-jekyll">2. How blogging work with Jekyll?</h2>

<p>You might be wondering how you can have a blog without a database. In true Jekyll style, blogging is powered by text files only.</p>

<h3 id="post-header">Post header</h3>

<p>All blog posts live in a folder called <code class="language-plaintext highlighter-rouge">posts</code>. Jekyll is responsible for transforming text file into rich text web pages without the help of a database. If we want to create a post from scratch, we need one file in a special name format: <code class="language-plaintext highlighter-rouge">YYYY-mm-dd-name.md</code>. The date and <code class="language-plaintext highlighter-rouge">name</code> part will form up a permanent link to this post.</p>

<p>Following header content:</p>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nn">---</span>
<span class="na">layout</span><span class="pi">:</span> <span class="s">post</span>
<span class="na">title</span><span class="pi">:</span> <span class="s">the title we include in the main page</span>
<span class="na">date</span><span class="pi">:</span> <span class="s">2023-02-08 15:58:00</span>
<span class="na">description</span><span class="pi">:</span> <span class="s">description showing in the preview mode</span>
<span class="na">tags</span><span class="pi">:</span> <span class="s">tags we want to attach.</span>
<span class="na">categories</span><span class="pi">:</span> <span class="s">categories we want to use.</span>
<span class="nn">---</span>
</code></pre></div></div>

<p>Now, we could proceed our content of this post.</p>

<p>We can write markdown scripts directly, but we still need to use the power of <a href="https://jekyllrb.com/docs/step-by-step/02-liquid/" target="\_blank">Liquid templating language</a> sometimes. For example, if we want to open an link in another tab, we need to append <code class="language-plaintext highlighter-rouge">{:target="_blank"}</code> at the end of a hyperlink <code class="language-plaintext highlighter-rouge">[description](http://link.com)</code>. We can also click the default <a href="/cv">cv link</a> without opening a new tab.</p>

<h2 id="3-html-support">3. HTML Support</h2>

<p>We can take full advantage of html with markdown. Here are some example to use html elements:</p>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">&lt;ul&gt;</code> and <code class="language-plaintext highlighter-rouge">&lt;li&gt;</code></p>

    <p><strong>source:</strong></p>

    <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;ul&gt;</span>
  <span class="nt">&lt;li&gt;</span>brunch<span class="nt">&lt;/li&gt;</span>
  <span class="nt">&lt;li&gt;</span>fixie<span class="nt">&lt;/li&gt;</span>
  <span class="nt">&lt;li&gt;</span>raybans<span class="nt">&lt;/li&gt;</span>
  <span class="nt">&lt;li&gt;</span>messenger bag<span class="nt">&lt;/li&gt;</span>
<span class="nt">&lt;/ul&gt;</span>
</code></pre></div>    </div>

    <p><strong>display:</strong></p>

    <ul>
    <li>brunch</li>
    <li>fixie</li>
    <li>raybans</li>
    <li>messenger bag</li>
</ul>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">&lt;a href=""&gt;</code></p>

    <p><strong>source:</strong></p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;a href="https://github.com"&gt;Github&lt;/a&gt;
</code></pre></div>    </div>

    <p><strong>display:</strong></p>

    <p><a href="https://github.com">Github</a></p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">&lt;hr&gt;</code> Separator</p>

    <p><strong>source:// or mermaid-cli</strong></p>

    <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;hr</span> <span class="nt">/&gt;</span>
</code></pre></div>    </div>

    <p><strong>display:</strong></p>

    <hr />
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">&lt;blockquote&gt;</code> for quote</p>

    <p><strong>source:</strong></p>

    <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;blockquote&gt;</span>
  We do not grow absolutely, chronologically. We grow sometimes in one
  dimension, and not in another, unevenly. We grow partially. We are relative.
  We are mature in one realm, childish in another. ‚ÄîAnais Nin
<span class="nt">&lt;/blockquote&gt;</span>
</code></pre></div>    </div>

    <p><strong>display:</strong></p>
  </li>
</ul>

<blockquote>
    We do not grow absolutely, chronologically. We grow sometimes in one dimension, and not in another, unevenly. We grow partially. We are relative. We are mature in one realm, childish in another.
    ‚ÄîAnais Nin
</blockquote>

<h3 id="html-formatting">HTML Formatting</h3>

<ul>
  <li><code class="language-plaintext highlighter-rouge">&lt;b&gt;</code> - <b>Bold text</b></li>
  <li><code class="language-plaintext highlighter-rouge">&lt;strong&gt;</code> - <strong>Important text</strong></li>
  <li><code class="language-plaintext highlighter-rouge">&lt;i&gt;</code> - <i>Italic text</i></li>
  <li><code class="language-plaintext highlighter-rouge">&lt;em&gt;</code> - <em>Emphasized text</em></li>
  <li><code class="language-plaintext highlighter-rouge">&lt;mark&gt;</code> - <mark>Marked text</mark></li>
  <li><code class="language-plaintext highlighter-rouge">&lt;small&gt;</code> - <small>Smaller text</small></li>
  <li><code class="language-plaintext highlighter-rouge">&lt;del&gt;</code> - <del>Deleted text</del></li>
  <li><code class="language-plaintext highlighter-rouge">&lt;ins&gt;</code> - Here are <ins>Inserted text</ins> between normal text.</li>
  <li><code class="language-plaintext highlighter-rouge">&lt;sub&gt;</code> - Here is<sub>Subscript text</sub></li>
  <li><code class="language-plaintext highlighter-rouge">&lt;sup&gt;</code> - Here is<sup>Superscript text</sup></li>
  <li><code class="language-plaintext highlighter-rouge">&lt;u&gt;</code> - <u>Underline text</u></li>
</ul>

<h3 id="text-size">Text Size</h3>

<p><strong>We can also set text size with attribute <code class="language-plaintext highlighter-rouge">style</code>.</strong></p>

<ol>
  <li>
    <p>normal mode.</p>

    <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;p</span> <span class="na">style=</span><span class="s">"font-size:70px"</span><span class="nt">&gt;</span>Hello World<span class="nt">&lt;/p&gt;</span>
</code></pre></div>    </div>

    <p style="font-size:70px">Hello World

</p>
  </li>
  <li>
    <p>Responsive size.</p>

    <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;h1</span> <span class="na">style=</span><span class="s">"font-size:10vw"</span><span class="nt">&gt;</span>Hello World<span class="nt">&lt;/h1&gt;</span>
</code></pre></div>    </div>

    <h1 style="font-size:10vw">Hello World</h1>

    <p>It‚Äôs responsive font size. The text size can be set with a <code class="language-plaintext highlighter-rouge">vw</code> unit, which means the ‚Äúviewpoint width‚Äù. If we resize the browser, the font size scales to the same viewpoint width.</p>

    <blockquote>
      <p>Viewport is the browser window size. 1vw = 1% of viewport width. If the viewport is 50cm wide, 1vw is 0.5cm.</p>
    </blockquote>
  </li>
</ol>

<h2 id="4-math">4. Math</h2>

<p>With the support of <a href="https://www.mathjax.org/">MathJax 3</a> engine, out post can render beautiful math inline and display mode. We just need to surround math expressions with <strong>$$</strong> , like <code class="language-plaintext highlighter-rouge">$$ E = mc^2 $$</code>. If we leave it inside a paragraph, it will produce an inline expression, just like \(E = mc^2\).</p>

<ul>
  <li><strong>Display mode</strong>: place <code class="language-plaintext highlighter-rouge">$$</code> as a separate paragraph</li>
</ul>

\[\sum_{k=1}^\infty |\langle x, e_k \rangle|^2 \leq \|x\|^2\]

<ul>
  <li><strong>MathJax mode</strong>: use <code class="language-plaintext highlighter-rouge">\begin{equation}...\end{equation}</code> ; add <code class="language-plaintext highlighter-rouge">\label{...}</code> inside the equation environment, we can now refer to the equation using <code class="language-plaintext highlighter-rouge">\eqref</code>.</li>
</ul>

<div class="language-latex highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">\begin{equation}</span>
<span class="k">\label</span><span class="p">{</span>eq:cauchy-schwarz<span class="p">}</span>
<span class="k">\left</span>( <span class="k">\sum</span><span class="p">_{</span>k=1<span class="p">}^</span>n a<span class="p">_</span>k b<span class="p">_</span>k <span class="k">\right</span>)<span class="p">^</span>2 <span class="k">\leq</span> <span class="k">\left</span>( <span class="k">\sum</span><span class="p">_{</span>k=1<span class="p">}^</span>n a<span class="p">_</span>k<span class="p">^</span>2 <span class="k">\right</span>) <span class="k">\left</span>( <span class="k">\sum</span><span class="p">_{</span>k=1<span class="p">}^</span>n b<span class="p">_</span>k<span class="p">^</span>2 <span class="k">\right</span>)
<span class="nt">\end{equation}</span>
</code></pre></div></div>

<p>\begin{equation}
\label{eq:cauchy-schwarz}
\left( \sum_{k=1}^n a_k b_k \right)^2 \leq \left( \sum_{k=1}^n a_k^2 \right) \left( \sum_{k=1}^n b_k^2 \right)
\end{equation}</p>

<p>We need to refer to the equation above:</p>

<div class="language-latex highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">\begin{align}</span>
x<span class="p">&amp;</span> = y<span class="p">_</span>1-y<span class="p">_</span>2+y<span class="p">_</span>3-y<span class="p">_</span>5+y<span class="p">_</span>8-<span class="k">\dots</span>
<span class="p">&amp;&amp;</span> <span class="k">\text</span><span class="p">{</span>by <span class="k">\eqref</span><span class="p">{</span>eq:cauchy-schwarz<span class="p">}}</span><span class="k">\\</span>
<span class="p">&amp;</span> = y'<span class="k">\circ</span> y<span class="p">^</span>* <span class="p">&amp;&amp;</span> <span class="k">\text</span><span class="p">{</span>(by <span class="k">\eqref</span><span class="p">{</span>eq:cauchy-schwarz<span class="p">}</span>)<span class="p">}</span><span class="k">\\</span>
<span class="p">&amp;</span> = y(0) y' <span class="p">&amp;&amp;</span> <span class="k">\text</span> <span class="p">{</span>by Axiom 1.<span class="p">}</span>
<span class="nt">\end{align}</span>
</code></pre></div></div>

<p>\begin{align}
x&amp; = y_1-y_2+y_3-y_5+y_8-\dots
&amp;&amp; \text{by \eqref{eq:cauchy-schwarz}} <br />
&amp; = y‚Äô\circ y^* &amp;&amp; \text{(by \eqref{eq:cauchy-schwarz})} <br />
&amp; = y(0) y‚Äô &amp;&amp; \text {by Axiom 1.}
\end{align}</p>

<p>Note that MathJax 3 is <a href="https://docs.mathjax.org/en/latest/upgrading/whats-new-3.0.html">a major re-write of MathJax</a> that brought a significant improvement to the loading and rendering speed, which is now <a href="http://www.intmath.com/cg5/katex-mathjax-comparison.php">on par with KaTeX</a>.</p>

<h2 id="5-code-highlight">5. Code highlight</h2>

<p>We can use a liquid tag to highlight our code:</p>

<hr />

<p>{% highlight c++ linenos %}<br />
code code code<br />
{% endhighlight %}</p>

<hr />

<figure class="highlight"><pre><code class="language-c--" data-lang="c++"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td class="code"><pre><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="k">const</span> <span class="err">\</span><span class="o">*</span><span class="n">argv</span><span class="p">[])</span> <span class="p">{</span>
<span class="n">string</span> <span class="n">myString</span><span class="p">;</span>

    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"input a string: "</span><span class="p">;</span>
    <span class="n">getline</span><span class="p">(</span><span class="n">cin</span><span class="p">,</span> <span class="n">myString</span><span class="p">);</span>
    <span class="kt">int</span> <span class="n">length</span> <span class="o">=</span> <span class="n">myString</span><span class="p">.</span><span class="n">length</span><span class="p">();</span>
    
    <span class="kt">char</span> <span class="n">charArray</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">char</span> <span class="o">*</span> <span class="p">[</span><span class="n">length</span><span class="p">];</span>
    
    <span class="n">charArray</span> <span class="o">=</span> <span class="n">myString</span><span class="p">;</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">length</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">){</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">charArray</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="s">" "</span><span class="p">;</span>
    <span class="p">}</span>
    
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>

<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p><strong>Rust code:</strong></p>

<figure class="highlight"><pre><code class="language-rust" data-lang="rust"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
</pre></td><td class="code"><pre><span class="nd">#![crate_name</span> <span class="nd">=</span> <span class="s">"doc"</span><span class="nd">]</span>

<span class="cd">/// A human being is represented here</span>
<span class="k">pub</span> <span class="k">struct</span> <span class="n">Person</span> <span class="p">{</span>
<span class="cd">/// A person must have a name, no matter how much Juliet may hate it</span>
<span class="n">name</span><span class="p">:</span> <span class="nb">String</span><span class="p">,</span>
<span class="p">}</span>

<span class="k">impl</span> <span class="n">Person</span> <span class="p">{</span>
<span class="cd">/// Returns a person with the name given them</span>
<span class="cd">///</span>
<span class="cd">/// # Arguments</span>
<span class="cd">///</span>
<span class="cd">/// \* `name` - A string slice that holds the name of the person</span>
<span class="cd">///</span>
<span class="cd">/// # Examples</span>
<span class="cd">///</span>
<span class="cd">/// `` /// // You can have rust code between fences inside the comments /// // If you pass --test to `rustdoc`, it will even test it for you! /// use doc::Person; /// let person = Person::new("name"); ///``</span>
<span class="k">pub</span> <span class="k">fn</span> <span class="nf">new</span><span class="p">(</span><span class="n">name</span><span class="p">:</span> <span class="o">&amp;</span><span class="nb">str</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="n">Person</span> <span class="p">{</span>
<span class="n">Person</span> <span class="p">{</span>
<span class="n">name</span><span class="p">:</span> <span class="n">name</span><span class="nf">.to_string</span><span class="p">(),</span>
<span class="p">}</span>
<span class="p">}</span>

    <span class="cd">/// Gives a friendly hello!</span>
    <span class="cd">///</span>
    <span class="cd">/// Says "Hello, [name](Person::name)" to the `Person` it is called on.</span>
    <span class="k">pub</span> <span class="k">fn</span> <span class="nf">hello</span><span class="p">(</span><span class="o">&amp;</span> <span class="k">self</span><span class="p">)</span> <span class="p">{</span>
        <span class="nd">println!</span><span class="p">(</span><span class="s">"Hello, {}!"</span><span class="p">,</span> <span class="k">self</span><span class="py">.name</span><span class="p">);</span>
    <span class="p">}</span>

<span class="p">}</span>

<span class="k">fn</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
<span class="k">let</span> <span class="n">john</span> <span class="o">=</span> <span class="nn">Person</span><span class="p">::</span><span class="nf">new</span><span class="p">(</span><span class="s">"John"</span><span class="p">);</span>

    <span class="n">john</span><span class="nf">.hello</span><span class="p">();</span>

<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<h2 id="6-images-layout">6. Images layout</h2>

<p>We can use different layout to form a group of images, here are some exmaples.</p>

<p>:arrow_right_hook: <strong>Images in the same row with a caption.</strong></p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"row mt-3"</span><span class="nt">&gt;</span>
       <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"col-sm mt-3 mt-md-0"</span><span class="nt">&gt;</span>
           {% include figure.html path="assets/img/9.jpg" class="img-fluid rounded z-depth-1" %}
       <span class="nt">&lt;/div&gt;</span>
       <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"col-sm mt-3 mt-md-0"</span><span class="nt">&gt;</span>
           {% include figure.html path="assets/img/7.jpg" class="img-fluid rounded z-depth-1" %}
       <span class="nt">&lt;/div&gt;</span>
   <span class="nt">&lt;/div&gt;</span>
   <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"caption"</span><span class="nt">&gt;</span>
       A simple, elegant caption looks good between image rows, after each row, or doesn't have to be there at all.
<span class="nt">&lt;/div&gt;</span>
</code></pre></div></div>

<div class="row mt-3">
       <div class="col-sm mt-3 mt-md-0">
           <figure>

  <picture>
    
    <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/9-480.webp" />
    <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/9-800.webp" />
    <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/9-1400.webp" />
    

    <!-- Fallback to the original file -->
    <img src="/assets/img/9.jpg" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />

  </picture>

</figure>

       </div>
       <div class="col-sm mt-3 mt-md-0">
           <figure>

  <picture>
    
    <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/7-480.webp" />
    <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/7-800.webp" />
    <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/7-1400.webp" />
    

    <!-- Fallback to the original file -->
    <img src="/assets/img/7.jpg" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />

  </picture>

</figure>

       </div>
   </div>
<div class="caption">
       A simple, elegant caption looks good between image rows, after each row, or doesn't have to be there at all.
</div>
<p>:arrow_right_hook: <strong>Images can be zoomable. Simply add <code class="language-plaintext highlighter-rouge">data-zoomable</code> to <code class="language-plaintext highlighter-rouge">&lt;img&gt;</code> tags that you want to make zoomable.</strong></p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"row mt-3"</span><span class="nt">&gt;</span>
       <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"col-sm mt-3 mt-md-0"</span><span class="nt">&gt;</span>
           {% include figure.html path="assets/img/8.jpg" class="img-fluid rounded z-depth-1" zoomable=true %}
       <span class="nt">&lt;/div&gt;</span>
       <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"col-sm mt-3 mt-md-0"</span><span class="nt">&gt;</span>
           {% include figure.html path="assets/img/10.jpg" class="img-fluid rounded z-depth-1" zoomable=true %}
       <span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;/div&gt;</span>
</code></pre></div></div>

<div class="row mt-3">
       <div class="col-sm mt-3 mt-md-0">
           <figure>

  <picture>
    
    <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/8-480.webp" />
    <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/8-800.webp" />
    <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/8-1400.webp" />
    

    <!-- Fallback to the original file -->
    <img src="/assets/img/8.jpg" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />

  </picture>

</figure>

       </div>
       <div class="col-sm mt-3 mt-md-0">
           <figure>

  <picture>
    
    <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/10-480.webp" />
    <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/10-800.webp" />
    <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/10-1400.webp" />
    

    <!-- Fallback to the original file -->
    <img src="/assets/img/10.jpg" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />

  </picture>

</figure>

       </div>
</div>
<p>:arrow_right_hook: <strong>Images are arranged into different mini-galleries.</strong></p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"row mt-3"</span><span class="nt">&gt;</span>
       <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"col-sm mt-3 mt-md-0"</span><span class="nt">&gt;</span>
           {% include figure.html path="assets/img/11.jpg" class="img-fluid rounded z-depth-1" zoomable=true %}
       <span class="nt">&lt;/div&gt;</span>
       <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"col-sm mt-3 mt-md-0"</span><span class="nt">&gt;</span>
           {% include figure.html path="assets/img/12.jpg" class="img-fluid rounded z-depth-1" zoomable=true %}
       <span class="nt">&lt;/div&gt;</span>
       <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"col-sm mt-3 mt-md-0"</span><span class="nt">&gt;</span>
           {% include figure.html path="assets/img/7.jpg" class="img-fluid rounded z-depth-1" zoomable=true %}
       <span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;/div&gt;</span>
</code></pre></div></div>

<div class="row mt-3">
       <div class="col-sm mt-3 mt-md-0">
           <figure>

  <picture>
    
    <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/11-480.webp" />
    <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/11-800.webp" />
    <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/11-1400.webp" />
    

    <!-- Fallback to the original file -->
    <img src="/assets/img/11.jpg" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />

  </picture>

</figure>

       </div>
       <div class="col-sm mt-3 mt-md-0">
           <figure>

  <picture>
    
    <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/12-480.webp" />
    <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/12-800.webp" />
    <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/12-1400.webp" />
    

    <!-- Fallback to the original file -->
    <img src="/assets/img/12.jpg" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />

  </picture>

</figure>

       </div>
       <div class="col-sm mt-3 mt-md-0">
           <figure>

  <picture>
    
    <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/7-480.webp" />
    <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/7-800.webp" />
    <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/7-1400.webp" />
    

    <!-- Fallback to the original file -->
    <img src="/assets/img/7.jpg" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />

  </picture>

</figure>

       </div>
</div>

<h2 id="7-diagrams">7. Diagrams</h2>

<p>We can generate great diagrams using <a href="https://github.com/zhustec/jekyll-diagrams" target="\_blank">jekyll-diagrams</a> plugin. We can use different languages such as <a href="https://mermaid-js.github.io/mermaid/" target="\_blank">mermaid</a>, <a href="https://plantuml.com/" target="\_blank">plantuml</a>, <a href="https://vega.github.io/vega-lite/" target="\_blank">vega-lite</a>, etc.</p>

<p>We prepared mermaid-cli before, so here are examples showing how to use mermaid.</p>

<h3 id="mermaid">Mermaid</h3>

<p><strong>Sequence Diagram</strong></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{% mermaid %}&gt;
sequenceDiagram
    participant John
    participant Alice
    Alice-&gt;&gt;John: Hello John, how are you?
    John--&gt;&gt;Alice: Great!
{% endmermaid %}
</code></pre></div></div>

<div class="jekyll-diagrams diagrams mermaid">
  Command Not Found: mmdc
</div>

<p><strong>flowchart</strong></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>flowchart TD
    A[Start] --&gt; B{Is it?}
    B -- Yes --&gt; C[OK]
    C --&gt; D[Rethink]
    D --&gt; B
    B -- No ----&gt; E[End]
</code></pre></div></div>

<div class="jekyll-diagrams diagrams mermaid">
  Command Not Found: mmdc
</div>

<p><strong>Class Diagrams</strong></p>

<pre><code class="language-mermaid">---
title: Animal example
---
classDiagram
    note "From Duck till Zebra"
    Animal &lt;|-- Duck
    note for Duck "can fly\ncan swim\ncan dive\ncan help in debugging"
    Animal &lt;|-- Fish
    Animal &lt;|-- Zebra
    Animal : +int age
    Animal : +String gender
    Animal: +isMammal()
    Animal: +mate()
    class Duck{
        +String beakColor
        +swim()
        +quack()
    }
    class Fish{
        -int sizeInFeet
        -canEat()
    }
    class Zebra{
        +bool is_wild
        +run()
    }
</code></pre>

<div class="jekyll-diagrams diagrams mermaid">
  Command Not Found: mmdc
</div>]]></content><author><name></name></author><category term="sample-posts" /><category term="formatting" /><summary type="html"><![CDATA[Produce great blogs with the support Jekyll]]></summary></entry><entry><title type="html">a distill-style blog post</title><link href="https://kobehub.github.io/blog/2021/distill/" rel="alternate" type="text/html" title="a distill-style blog post" /><published>2021-05-22T00:00:00+00:00</published><updated>2021-05-22T00:00:00+00:00</updated><id>https://kobehub.github.io/blog/2021/distill</id><content type="html" xml:base="https://kobehub.github.io/blog/2021/distill/"><![CDATA[<h2 id="equations">Equations</h2>

<p>This theme supports rendering beautiful math in inline and display modes using <a href="https://www.mathjax.org/">MathJax 3</a> engine.
You just need to surround your math expression with <code class="language-plaintext highlighter-rouge">$$</code>, like <code class="language-plaintext highlighter-rouge">$$ E = mc^2 $$</code>.
If you leave it inside a paragraph, it will produce an inline expression, just like \(E = mc^2\).</p>

<p>To use display mode, again surround your expression with <code class="language-plaintext highlighter-rouge">$$</code> and place it as a separate paragraph.
Here is an example:</p>

\[\left( \sum_{k=1}^n a_k b_k \right)^2 \leq \left( \sum_{k=1}^n a_k^2 \right) \left( \sum_{k=1}^n b_k^2 \right)\]

<p>Note that MathJax 3 is <a href="https://docs.mathjax.org/en/latest/upgrading/whats-new-3.0.html">a major re-write of MathJax</a> that brought a significant improvement to the loading and rendering speed, which is now <a href="http://www.intmath.com/cg5/katex-mathjax-comparison.php">on par with KaTeX</a>.</p>

<hr />

<h2 id="citations">Citations</h2>

<p>Citations are then used in the article body with the <code class="language-plaintext highlighter-rouge">&lt;d-cite&gt;</code> tag.
The key attribute is a reference to the id provided in the bibliography.
The key attribute can take multiple ids, separated by commas.</p>

<p>The citation is presented inline like this: <d-cite key="gregor2015draw"></d-cite> (a number that displays more information on hover).
If you have an appendix, a bibliography is automatically created and populated in it.</p>

<p>Distill chose a numerical inline citation style to improve readability of citation dense articles and because many of the benefits of longer citations are obviated by displaying more information on hover.
However, we consider it good style to mention author last names if you discuss something at length and it fits into the flow well‚Äâ‚Äî‚Äâthe authors are human and it‚Äôs nice for them to have the community associate them with their work.</p>

<hr />

<h2 id="footnotes">Footnotes</h2>

<p>Just wrap the text you would like to show up in a footnote in a <code class="language-plaintext highlighter-rouge">&lt;d-footnote&gt;</code> tag.
The number of the footnote will be automatically generated.<d-footnote>This will become a hoverable footnote.</d-footnote></p>

<hr />

<h2 id="code-blocks">Code Blocks</h2>

<p>Syntax highlighting is provided within <code class="language-plaintext highlighter-rouge">&lt;d-code&gt;</code> tags.
An example of inline code snippets: <code class="language-plaintext highlighter-rouge">&lt;d-code language="html"&gt;let x = 10;&lt;/d-code&gt;</code>.
For larger blocks of code, add a <code class="language-plaintext highlighter-rouge">block</code> attribute:</p>

<d-code block="" language="javascript">
  var x = 25;
  function(x) {
    return x * x;
  }
</d-code>

<p><strong>Note:</strong> <code class="language-plaintext highlighter-rouge">&lt;d-code&gt;</code> blocks do not look good in the dark mode.
You can always use the default code-highlight using the <code class="language-plaintext highlighter-rouge">highlight</code> liquid tag:</p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">25</span><span class="p">;</span>
<span class="kd">function</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">x</span> <span class="o">*</span> <span class="nx">x</span><span class="p">;</span>
<span class="p">}</span></code></pre></figure>

<hr />

<h2 id="interactive-plots">Interactive Plots</h2>

<p>You can add interative plots using plotly + iframes :framed_picture:</p>

<div class="l-page">
  <iframe src="/assets/plotly/demo.html" frameborder="0" scrolling="no" height="500px" width="100%" style="border: 1px dashed grey;"></iframe>
</div>

<p>The plot must be generated separately and saved into an HTML file.
To generate the plot that you see above, you can use the following code snippet:</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="n">pandas</span> <span class="k">as</span> <span class="n">pd</span>
<span class="kn">import</span> <span class="n">plotly.express</span> <span class="k">as</span> <span class="n">px</span>
<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nf">read_csv</span><span class="p">(</span>
  <span class="sh">'</span><span class="s">https://raw.githubusercontent.com/plotly/datasets/master/earthquakes-23k.csv</span><span class="sh">'</span>
<span class="p">)</span>
<span class="n">fig</span> <span class="o">=</span> <span class="n">px</span><span class="p">.</span><span class="nf">density_mapbox</span><span class="p">(</span>
  <span class="n">df</span><span class="p">,</span>
  <span class="n">lat</span><span class="o">=</span><span class="sh">'</span><span class="s">Latitude</span><span class="sh">'</span><span class="p">,</span>
  <span class="n">lon</span><span class="o">=</span><span class="sh">'</span><span class="s">Longitude</span><span class="sh">'</span><span class="p">,</span>
  <span class="n">z</span><span class="o">=</span><span class="sh">'</span><span class="s">Magnitude</span><span class="sh">'</span><span class="p">,</span>
  <span class="n">radius</span><span class="o">=</span><span class="mi">10</span><span class="p">,</span>
  <span class="n">center</span><span class="o">=</span><span class="nf">dict</span><span class="p">(</span><span class="n">lat</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">lon</span><span class="o">=</span><span class="mi">180</span><span class="p">),</span>
  <span class="n">zoom</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span>
  <span class="n">mapbox_style</span><span class="o">=</span><span class="sh">"</span><span class="s">stamen-terrain</span><span class="sh">"</span><span class="p">,</span>
<span class="p">)</span>
<span class="n">fig</span><span class="p">.</span><span class="nf">show</span><span class="p">()</span>
<span class="n">fig</span><span class="p">.</span><span class="nf">write_html</span><span class="p">(</span><span class="sh">'</span><span class="s">assets/plotly/demo.html</span><span class="sh">'</span><span class="p">)</span></code></pre></figure>

<hr />

<h2 id="layouts">Layouts</h2>

<p>The main text column is referred to as the body.
It is the assumed layout of any direct descendants of the <code class="language-plaintext highlighter-rouge">d-article</code> element.</p>

<div class="fake-img l-body">
  <p>.l-body</p>
</div>

<p>For images you want to display a little larger, try <code class="language-plaintext highlighter-rouge">.l-page</code>:</p>

<div class="fake-img l-page">
  <p>.l-page</p>
</div>

<p>All of these have an outset variant if you want to poke out from the body text a little bit.
For instance:</p>

<div class="fake-img l-body-outset">
  <p>.l-body-outset</p>
</div>

<div class="fake-img l-page-outset">
  <p>.l-page-outset</p>
</div>

<p>Occasionally you‚Äôll want to use the full browser width.
For this, use <code class="language-plaintext highlighter-rouge">.l-screen</code>.
You can also inset the element a little from the edge of the browser by using the inset variant.</p>

<div class="fake-img l-screen">
  <p>.l-screen</p>
</div>
<div class="fake-img l-screen-inset">
  <p>.l-screen-inset</p>
</div>

<p>The final layout is for marginalia, asides, and footnotes.
It does not interrupt the normal flow of <code class="language-plaintext highlighter-rouge">.l-body</code> sized text except on mobile screen sizes.</p>

<div class="fake-img l-gutter">
  <p>.l-gutter</p>
</div>

<hr />

<h2 id="other-typography">Other Typography?</h2>

<p>Emphasis, aka italics, with <em>asterisks</em> (<code class="language-plaintext highlighter-rouge">*asterisks*</code>) or <em>underscores</em> (<code class="language-plaintext highlighter-rouge">_underscores_</code>).</p>

<p>Strong emphasis, aka bold, with <strong>asterisks</strong> or <strong>underscores</strong>.</p>

<p>Combined emphasis with <strong>asterisks and <em>underscores</em></strong>.</p>

<p>Strikethrough uses two tildes. <del>Scratch this.</del></p>

<ol>
  <li>First ordered list item</li>
  <li>Another item
‚ãÖ‚ãÖ* Unordered sub-list.</li>
  <li>Actual numbers don‚Äôt matter, just that it‚Äôs a number
‚ãÖ‚ãÖ1. Ordered sub-list</li>
  <li>And another item.</li>
</ol>

<p>‚ãÖ‚ãÖ‚ãÖYou can have properly indented paragraphs within list items. Notice the blank line above, and the leading spaces (at least one, but we‚Äôll use three here to also align the raw Markdown).</p>

<p>‚ãÖ‚ãÖ‚ãÖTo have a line break without a paragraph, you will need to use two trailing spaces.‚ãÖ‚ãÖ
‚ãÖ‚ãÖ‚ãÖNote that this line is separate, but within the same paragraph.‚ãÖ‚ãÖ
‚ãÖ‚ãÖ‚ãÖ(This is contrary to the typical GFM line break behaviour, where trailing spaces are not required.)</p>

<ul>
  <li>Unordered list can use asterisks</li>
  <li>Or minuses</li>
  <li>Or pluses</li>
</ul>

<p><a href="https://www.google.com">I‚Äôm an inline-style link</a></p>

<p><a href="https://www.google.com" title="Google's Homepage">I‚Äôm an inline-style link with title</a></p>

<p><a href="https://www.mozilla.org">I‚Äôm a reference-style link</a></p>

<p><a href="../blob/master/LICENSE">I‚Äôm a relative reference to a repository file</a></p>

<p><a href="http://slashdot.org">You can use numbers for reference-style link definitions</a></p>

<p>Or leave it empty and use the <a href="http://www.reddit.com">link text itself</a>.</p>

<p>URLs and URLs in angle brackets will automatically get turned into links.
http://www.example.com or <a href="http://www.example.com">http://www.example.com</a> and sometimes
example.com (but not on Github, for example).</p>

<p>Some text to show that the reference links can follow later.</p>

<p>Here‚Äôs our logo (hover to see the title text):</p>

<p>Inline-style:
<img src="https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png" alt="alt text" title="Logo Title Text 1" /></p>

<p>Reference-style:
<img src="https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png" alt="alt text" title="Logo Title Text 2" /></p>

<p>Inline <code class="language-plaintext highlighter-rouge">code</code> has <code class="language-plaintext highlighter-rouge">back-ticks around</code> it.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">s</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">JavaScript syntax highlighting</span><span class="dl">"</span><span class="p">;</span>
<span class="nf">alert</span><span class="p">(</span><span class="nx">s</span><span class="p">);</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">s</span> <span class="o">=</span> <span class="sh">"</span><span class="s">Python syntax highlighting</span><span class="sh">"</span>
<span class="k">print</span> <span class="n">s</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>No language indicated, so no syntax highlighting.
But let's throw in a &lt;b&gt;tag&lt;/b&gt;.
</code></pre></div></div>

<p>Colons can be used to align columns.</p>

<table>
  <thead>
    <tr>
      <th>Tables</th>
      <th style="text-align: center">Are</th>
      <th style="text-align: right">Cool</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>col 3 is</td>
      <td style="text-align: center">right-aligned</td>
      <td style="text-align: right">$1600</td>
    </tr>
    <tr>
      <td>col 2 is</td>
      <td style="text-align: center">centered</td>
      <td style="text-align: right">$12</td>
    </tr>
    <tr>
      <td>zebra stripes</td>
      <td style="text-align: center">are neat</td>
      <td style="text-align: right">$1</td>
    </tr>
  </tbody>
</table>

<p>There must be at least 3 dashes separating each header cell.
The outer pipes (|) are optional, and you don‚Äôt need to make the
raw Markdown line up prettily. You can also use inline Markdown.</p>

<table>
  <thead>
    <tr>
      <th>Markdown</th>
      <th>Less</th>
      <th>Pretty</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><em>Still</em></td>
      <td><code class="language-plaintext highlighter-rouge">renders</code></td>
      <td><strong>nicely</strong></td>
    </tr>
    <tr>
      <td>1</td>
      <td>2</td>
      <td>3</td>
    </tr>
  </tbody>
</table>

<blockquote>
  <p>Blockquotes are very handy in email to emulate reply text.
This line is part of the same quote.</p>
</blockquote>

<p>Quote break.</p>

<blockquote>
  <p>This is a very long line that will still be quoted properly when it wraps. Oh boy let‚Äôs keep writing to make sure this is long enough to actually wrap for everyone. Oh, you can <em>put</em> <strong>Markdown</strong> into a blockquote.</p>
</blockquote>

<p>Here‚Äôs a line for us to start with.</p>

<p>This line is separated from the one above by two newlines, so it will be a <em>separate paragraph</em>.</p>

<p>This line is also a separate paragraph, but‚Ä¶
This line is only separated by a single newline, so it‚Äôs a separate line in the <em>same paragraph</em>.</p>]]></content><author><name>Albert Einstein</name></author><summary type="html"><![CDATA[an example of a distill-style blog post and main elements]]></summary></entry></feed>