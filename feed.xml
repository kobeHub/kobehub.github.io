<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="https://innohub.top/feed.xml" rel="self" type="application/atom+xml"/><link href="https://innohub.top/" rel="alternate" type="text/html" hreflang="en"/><updated>2023-02-11T08:16:17+00:00</updated><id>https://innohub.top/feed.xml</id><title type="html">blank</title><subtitle>Personal website of Inno, holding blogs related computer technology and life. </subtitle><entry><title type="html">How to write one colorful post in a few minutes?</title><link href="https://innohub.top/blog/2023/write-one-post/" rel="alternate" type="text/html" title="How to write one colorful post in a few minutes?"/><published>2023-02-08T15:58:00+00:00</published><updated>2023-02-08T15:58:00+00:00</updated><id>https://innohub.top/blog/2023/write-one-post</id><content type="html" xml:base="https://innohub.top/blog/2023/write-one-post/"><![CDATA[<p>Recently, I migrated my personal site from Hugo to Jekyll and I was satisfied to make this change. My website seems to be silent for roughly 3 years after I entered Pinduoduo. It is the right time to bring my person page back to the earth as well as my writing habit.</p> <p><a href="https://jekyllrb.com/" target="\_blank">Jekyll</a> is a powerful static websites and blogs generator. It takes text written in your favorite markup language and uses layouts to create a static website. You can tweak the site’s look and feel, URLs, the data displayed on the page, and more. Since I am not really familiar with all the features Jekyll has provided to write a nice post, I will summarize some common usage in this blog.</p> <h2 id="1-how-to-use-jekyll-">1. How to use Jekyll ?</h2> <p><strong>Prerequisites</strong></p> <ul> <li>Ruby version <strong>2.5.0</strong> or higher</li> <li>RubyGems</li> <li>GCC and Make</li> </ul> <p><strong>Use Jekyll locally</strong></p> <ol> <li> <p>Install all <a href="https://jekyllrb.com/docs/installation/">prerequisites</a>.</p> </li> <li> <p>Install the jekyll and bundler</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>gem <span class="nb">install </span>jekyll bundler
</code></pre></div> </div> </li> <li> <p>Install <code class="language-plaintext highlighter-rouge">mermaid-cli</code></p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm <span class="nb">install</span> <span class="nt">-g</span> @mermaid-js/mermaid-cli
// or mermaid-cli
</code></pre></div> </div> <p>If we cannot install chromium, we can ignore it.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">PUPPETEER_SKIP_DOWNLOAD</span><span class="o">=</span>1 npm <span class="nb">install</span> <span class="nt">-g</span> @mermaid-js/mermaid-cli
// or mermaid-cli
</code></pre></div> </div> </li> <li>Serve in local environment. <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bundle <span class="nb">exec </span>jekyll serve <span class="nt">--host</span> 0.0.0.0
</code></pre></div> </div> </li> <li>Browse to <a href="http://127.0.0.1:4000/">http://127.0.0.1:4000</a></li> </ol> <p>Now, we could visit and preview our blog locally before pushing contents to github pages.</p> <h2 id="2-how-blogging-work-with-jekyll">2. How blogging work with Jekyll?</h2> <p>You might be wondering how you can have a blog without a database. In true Jekyll style, blogging is powered by text files only.</p> <h3 id="post-header">Post header</h3> <p>All blog posts live in a folder called <code class="language-plaintext highlighter-rouge">posts</code>. Jekyll is responsible for transforming text file into rich text web pages without the help of a database. If we want to create a post from scratch, we need one file in a special name format: <code class="language-plaintext highlighter-rouge">YYYY-mm-dd-name.md</code>. The date and <code class="language-plaintext highlighter-rouge">name</code> part will form up a permanent link to this post.</p> <p>Following header content:</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nn">---</span>
<span class="na">layout</span><span class="pi">:</span> <span class="s">post</span>
<span class="na">title</span><span class="pi">:</span> <span class="s">the title we include in the main page</span>
<span class="na">date</span><span class="pi">:</span> <span class="s">2023-02-08 15:58:00</span>
<span class="na">description</span><span class="pi">:</span> <span class="s">description showing in the preview mode</span>
<span class="na">tags</span><span class="pi">:</span> <span class="s">tags we want to attach.</span>
<span class="na">categories</span><span class="pi">:</span> <span class="s">categories we want to use.</span>
<span class="nn">---</span>
</code></pre></div></div> <p>Now, we could proceed our content of this post.</p> <p>We can write markdown scripts directly, but we still need to use the power of <a href="https://jekyllrb.com/docs/step-by-step/02-liquid/" target="\_blank">Liquid templating language</a> sometimes. For example, if we want to open an link in another tab, we need to append <code class="language-plaintext highlighter-rouge">{:target="_blank"}</code> at the end of a hyperlink <code class="language-plaintext highlighter-rouge">[description](http://link.com)</code>. We can also click the default <a href="/cv">cv link</a> without opening a new tab.</p> <h2 id="3-html-support">3. HTML Support</h2> <p>We can take full advantage of html with markdown. Here are some example to use html elements:</p> <ul> <li> <p><code class="language-plaintext highlighter-rouge">&lt;ul&gt;</code> and <code class="language-plaintext highlighter-rouge">&lt;li&gt;</code></p> <p><strong>source:</strong></p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;ul&gt;</span>
  <span class="nt">&lt;li&gt;</span>brunch<span class="nt">&lt;/li&gt;</span>
  <span class="nt">&lt;li&gt;</span>fixie<span class="nt">&lt;/li&gt;</span>
  <span class="nt">&lt;li&gt;</span>raybans<span class="nt">&lt;/li&gt;</span>
  <span class="nt">&lt;li&gt;</span>messenger bag<span class="nt">&lt;/li&gt;</span>
<span class="nt">&lt;/ul&gt;</span>
</code></pre></div> </div> <p><strong>display:</strong></p> <ul> <li>brunch</li> <li>fixie</li> <li>raybans</li> <li>messenger bag</li> </ul> </li> <li> <p><code class="language-plaintext highlighter-rouge">&lt;a href=""&gt;</code></p> <p><strong>source:</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;a href="https://github.com"&gt;Github&lt;/a&gt;
</code></pre></div> </div> <p><strong>display:</strong></p> <p><a href="https://github.com">Github</a></p> </li> <li> <p><code class="language-plaintext highlighter-rouge">&lt;hr&gt;</code> Separator</p> <p><strong>source:</strong></p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;hr</span> <span class="nt">/&gt;</span>
</code></pre></div> </div> <p><strong>display:</strong></p> <hr/> </li> <li> <p><code class="language-plaintext highlighter-rouge">&lt;blockquote&gt;</code> for quote</p> <p><strong>source:</strong></p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;blockquote&gt;</span>
  We do not grow absolutely, chronologically. We grow sometimes in one
  dimension, and not in another, unevenly. We grow partially. We are relative.
  We are mature in one realm, childish in another. —Anais Nin
<span class="nt">&lt;/blockquote&gt;</span>
</code></pre></div> </div> <p><strong>display:</strong></p> </li> </ul> <blockquote> We do not grow absolutely, chronologically. We grow sometimes in one dimension, and not in another, unevenly. We grow partially. We are relative. We are mature in one realm, childish in another. —Anais Nin </blockquote> <h3 id="html-formatting">HTML Formatting</h3> <ul> <li><code class="language-plaintext highlighter-rouge">&lt;b&gt;</code> - <b>Bold text</b></li> <li><code class="language-plaintext highlighter-rouge">&lt;strong&gt;</code> - <strong>Important text</strong></li> <li><code class="language-plaintext highlighter-rouge">&lt;i&gt;</code> - <i>Italic text</i></li> <li><code class="language-plaintext highlighter-rouge">&lt;em&gt;</code> - <em>Emphasized text</em></li> <li><code class="language-plaintext highlighter-rouge">&lt;mark&gt;</code> - <mark>Marked text</mark></li> <li><code class="language-plaintext highlighter-rouge">&lt;small&gt;</code> - <small>Smaller text</small></li> <li><code class="language-plaintext highlighter-rouge">&lt;del&gt;</code> - <del>Deleted text</del></li> <li><code class="language-plaintext highlighter-rouge">&lt;ins&gt;</code> - Here are <ins>Inserted text</ins> between normal text.</li> <li><code class="language-plaintext highlighter-rouge">&lt;sub&gt;</code> - Here is<sub>Subscript text</sub></li> <li><code class="language-plaintext highlighter-rouge">&lt;sup&gt;</code> - Here is<sup>Superscript text</sup></li> <li><code class="language-plaintext highlighter-rouge">&lt;u&gt;</code> - <u>Underline text</u></li> </ul> <h3 id="text-size">Text Size</h3> <p><strong>We can also set text size with attribute <code class="language-plaintext highlighter-rouge">style</code>.</strong></p> <ol> <li> <p>normal mode.</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;p</span> <span class="na">style=</span><span class="s">"font-size:70px"</span><span class="nt">&gt;</span>Hello World<span class="nt">&lt;/p&gt;</span>
</code></pre></div> </div> <p style="font-size:70px">Hello World </p> </li> <li> <p>Responsive size.</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;h1</span> <span class="na">style=</span><span class="s">"font-size:10vw"</span><span class="nt">&gt;</span>Hello World<span class="nt">&lt;/h1&gt;</span>
</code></pre></div> </div> <h1 style="font-size:10vw">Hello World</h1> <p>It’s responsive font size. The text size can be set with a <code class="language-plaintext highlighter-rouge">vw</code> unit, which means the “viewpoint width”. If we resize the browser, the font size scales to the same viewpoint width.</p> <blockquote> <p>Viewport is the browser window size. 1vw = 1% of viewport width. If the viewport is 50cm wide, 1vw is 0.5cm.</p> </blockquote> </li> </ol> <h2 id="4-math">4. Math</h2> <p>With the support of <a href="https://www.mathjax.org/">MathJax 3</a> engine, out post can render beautiful math inline and display mode. We just need to surround math expressions with <strong>$$</strong> , like <code class="language-plaintext highlighter-rouge">$$ E = mc^2 $$</code>. If we leave it inside a paragraph, it will produce an inline expression, just like \(E = mc^2\).</p> <ul> <li><strong>Display mode</strong>: place <code class="language-plaintext highlighter-rouge">$$</code> as a separate paragraph</li> </ul> \[\sum_{k=1}^\infty |\langle x, e_k \rangle|^2 \leq \|x\|^2\] <ul> <li><strong>MathJax mode</strong>: use <code class="language-plaintext highlighter-rouge">\begin{equation}...\end{equation}</code> ; add <code class="language-plaintext highlighter-rouge">\label{...}</code> inside the equation environment, we can now refer to the equation using <code class="language-plaintext highlighter-rouge">\eqref</code>.</li> </ul> <div class="language-latex highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">\begin{equation}</span>
<span class="k">\label</span><span class="p">{</span>eq:cauchy-schwarz<span class="p">}</span>
<span class="k">\left</span>( <span class="k">\sum</span><span class="p">_{</span>k=1<span class="p">}^</span>n a<span class="p">_</span>k b<span class="p">_</span>k <span class="k">\right</span>)<span class="p">^</span>2 <span class="k">\leq</span> <span class="k">\left</span>( <span class="k">\sum</span><span class="p">_{</span>k=1<span class="p">}^</span>n a<span class="p">_</span>k<span class="p">^</span>2 <span class="k">\right</span>) <span class="k">\left</span>( <span class="k">\sum</span><span class="p">_{</span>k=1<span class="p">}^</span>n b<span class="p">_</span>k<span class="p">^</span>2 <span class="k">\right</span>)
<span class="nt">\end{equation}</span>
</code></pre></div></div> <p>\begin{equation} \label{eq:cauchy-schwarz} \left( \sum_{k=1}^n a_k b_k \right)^2 \leq \left( \sum_{k=1}^n a_k^2 \right) \left( \sum_{k=1}^n b_k^2 \right) \end{equation}</p> <p>We need to refer to the equation above:</p> <div class="language-latex highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">\begin{align}</span>
x<span class="p">&amp;</span> = y<span class="p">_</span>1-y<span class="p">_</span>2+y<span class="p">_</span>3-y<span class="p">_</span>5+y<span class="p">_</span>8-<span class="k">\dots</span>
<span class="p">&amp;&amp;</span> <span class="k">\text</span><span class="p">{</span>by <span class="k">\eqref</span><span class="p">{</span>eq:cauchy-schwarz<span class="p">}}</span><span class="k">\\</span>
<span class="p">&amp;</span> = y'<span class="k">\circ</span> y<span class="p">^</span>* <span class="p">&amp;&amp;</span> <span class="k">\text</span><span class="p">{</span>(by <span class="k">\eqref</span><span class="p">{</span>eq:cauchy-schwarz<span class="p">}</span>)<span class="p">}</span><span class="k">\\</span>
<span class="p">&amp;</span> = y(0) y' <span class="p">&amp;&amp;</span> <span class="k">\text</span> <span class="p">{</span>by Axiom 1.<span class="p">}</span>
<span class="nt">\end{align}</span>
</code></pre></div></div> <p>\begin{align} x&amp; = y_1-y_2+y_3-y_5+y_8-\dots &amp;&amp; \text{by \eqref{eq:cauchy-schwarz}} <br/> &amp; = y’\circ y^* &amp;&amp; \text{(by \eqref{eq:cauchy-schwarz})} <br/> &amp; = y(0) y’ &amp;&amp; \text {by Axiom 1.} \end{align}</p> <p>Note that MathJax 3 is <a href="https://docs.mathjax.org/en/latest/upgrading/whats-new-3.0.html">a major re-write of MathJax</a> that brought a significant improvement to the loading and rendering speed, which is now <a href="http://www.intmath.com/cg5/katex-mathjax-comparison.php">on par with KaTeX</a>.</p> <h2 id="5-code-highlight">5. Code highlight</h2> <p>We can use a liquid tag to highlight our code:</p> <hr/> <p>{% highlight c++ linenos %}<br/> code code code<br/> {% endhighlight %}</p> <hr/> <figure class="highlight"><pre><code class="language-c--" data-lang="c++"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td class="code"><pre><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="k">const</span> <span class="err">\</span><span class="o">*</span><span class="n">argv</span><span class="p">[])</span> <span class="p">{</span>
<span class="n">string</span> <span class="n">myString</span><span class="p">;</span>

    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"input a string: "</span><span class="p">;</span>
    <span class="n">getline</span><span class="p">(</span><span class="n">cin</span><span class="p">,</span> <span class="n">myString</span><span class="p">);</span>
    <span class="kt">int</span> <span class="n">length</span> <span class="o">=</span> <span class="n">myString</span><span class="p">.</span><span class="n">length</span><span class="p">();</span>
    
    <span class="kt">char</span> <span class="n">charArray</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">char</span> <span class="o">*</span> <span class="p">[</span><span class="n">length</span><span class="p">];</span>
    
    <span class="n">charArray</span> <span class="o">=</span> <span class="n">myString</span><span class="p">;</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">length</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">){</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">charArray</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="s">" "</span><span class="p">;</span>
    <span class="p">}</span>
    
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>

<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure> <p><strong>Rust code:</strong></p> <figure class="highlight"><pre><code class="language-rust" data-lang="rust"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
</pre></td><td class="code"><pre><span class="nd">#![crate_name</span> <span class="nd">=</span> <span class="s">"doc"</span><span class="nd">]</span>

<span class="cd">/// A human being is represented here</span>
<span class="k">pub</span> <span class="k">struct</span> <span class="n">Person</span> <span class="p">{</span>
<span class="cd">/// A person must have a name, no matter how much Juliet may hate it</span>
<span class="n">name</span><span class="p">:</span> <span class="nb">String</span><span class="p">,</span>
<span class="p">}</span>

<span class="k">impl</span> <span class="n">Person</span> <span class="p">{</span>
<span class="cd">/// Returns a person with the name given them</span>
<span class="cd">///</span>
<span class="cd">/// # Arguments</span>
<span class="cd">///</span>
<span class="cd">/// \* `name` - A string slice that holds the name of the person</span>
<span class="cd">///</span>
<span class="cd">/// # Examples</span>
<span class="cd">///</span>
<span class="cd">/// `` /// // You can have rust code between fences inside the comments /// // If you pass --test to `rustdoc`, it will even test it for you! /// use doc::Person; /// let person = Person::new("name"); ///``</span>
<span class="k">pub</span> <span class="k">fn</span> <span class="nf">new</span><span class="p">(</span><span class="n">name</span><span class="p">:</span> <span class="o">&amp;</span><span class="nb">str</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="n">Person</span> <span class="p">{</span>
<span class="n">Person</span> <span class="p">{</span>
<span class="n">name</span><span class="p">:</span> <span class="n">name</span><span class="nf">.to_string</span><span class="p">(),</span>
<span class="p">}</span>
<span class="p">}</span>

    <span class="cd">/// Gives a friendly hello!</span>
    <span class="cd">///</span>
    <span class="cd">/// Says "Hello, [name](Person::name)" to the `Person` it is called on.</span>
    <span class="k">pub</span> <span class="k">fn</span> <span class="nf">hello</span><span class="p">(</span><span class="o">&amp;</span> <span class="k">self</span><span class="p">)</span> <span class="p">{</span>
        <span class="nd">println!</span><span class="p">(</span><span class="s">"Hello, {}!"</span><span class="p">,</span> <span class="k">self</span><span class="py">.name</span><span class="p">);</span>
    <span class="p">}</span>

<span class="p">}</span>

<span class="k">fn</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
<span class="k">let</span> <span class="n">john</span> <span class="o">=</span> <span class="nn">Person</span><span class="p">::</span><span class="nf">new</span><span class="p">(</span><span class="s">"John"</span><span class="p">);</span>

    <span class="n">john</span><span class="nf">.hello</span><span class="p">();</span>

<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure> <h2 id="6-images-layout">6. Images layout</h2> <p>We can use different layout to form a group of images, here are some exmaples.</p> <p>:arrow_right_hook: <strong>Images in the same row with a caption.</strong></p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"row mt-3"</span><span class="nt">&gt;</span>
       <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"col-sm mt-3 mt-md-0"</span><span class="nt">&gt;</span>
           {% include figure.html path="assets/img/9.jpg" class="img-fluid rounded z-depth-1" %}
       <span class="nt">&lt;/div&gt;</span>
       <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"col-sm mt-3 mt-md-0"</span><span class="nt">&gt;</span>
           {% include figure.html path="assets/img/7.jpg" class="img-fluid rounded z-depth-1" %}
       <span class="nt">&lt;/div&gt;</span>
   <span class="nt">&lt;/div&gt;</span>
   <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"caption"</span><span class="nt">&gt;</span>
       A simple, elegant caption looks good between image rows, after each row, or doesn't have to be there at all.
<span class="nt">&lt;/div&gt;</span>
</code></pre></div></div> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/9-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/9-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/9-1400.webp"/> <img src="/assets/img/9.jpg" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/7-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/7-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/7-1400.webp"/> <img src="/assets/img/7.jpg" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> A simple, elegant caption looks good between image rows, after each row, or doesn't have to be there at all. </div> <p>:arrow_right_hook: <strong>Images can be zoomable. Simply add <code class="language-plaintext highlighter-rouge">data-zoomable</code> to <code class="language-plaintext highlighter-rouge">&lt;img&gt;</code> tags that you want to make zoomable.</strong></p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"row mt-3"</span><span class="nt">&gt;</span>
       <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"col-sm mt-3 mt-md-0"</span><span class="nt">&gt;</span>
           {% include figure.html path="assets/img/8.jpg" class="img-fluid rounded z-depth-1" zoomable=true %}
       <span class="nt">&lt;/div&gt;</span>
       <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"col-sm mt-3 mt-md-0"</span><span class="nt">&gt;</span>
           {% include figure.html path="assets/img/10.jpg" class="img-fluid rounded z-depth-1" zoomable=true %}
       <span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;/div&gt;</span>
</code></pre></div></div> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/8-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/8-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/8-1400.webp"/> <img src="/assets/img/8.jpg" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/10-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/10-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/10-1400.webp"/> <img src="/assets/img/10.jpg" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>:arrow_right_hook: <strong>Images are arranged into different mini-galleries.</strong></p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"row mt-3"</span><span class="nt">&gt;</span>
       <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"col-sm mt-3 mt-md-0"</span><span class="nt">&gt;</span>
           {% include figure.html path="assets/img/11.jpg" class="img-fluid rounded z-depth-1" zoomable=true %}
       <span class="nt">&lt;/div&gt;</span>
       <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"col-sm mt-3 mt-md-0"</span><span class="nt">&gt;</span>
           {% include figure.html path="assets/img/12.jpg" class="img-fluid rounded z-depth-1" zoomable=true %}
       <span class="nt">&lt;/div&gt;</span>
       <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"col-sm mt-3 mt-md-0"</span><span class="nt">&gt;</span>
           {% include figure.html path="assets/img/7.jpg" class="img-fluid rounded z-depth-1" zoomable=true %}
       <span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;/div&gt;</span>
</code></pre></div></div> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/11-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/11-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/11-1400.webp"/> <img src="/assets/img/11.jpg" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/12-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/12-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/12-1400.webp"/> <img src="/assets/img/12.jpg" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/7-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/7-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/7-1400.webp"/> <img src="/assets/img/7.jpg" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <h2 id="7-diagrams">7. Diagrams</h2> <p>We can generate great diagrams using <a href="https://github.com/zhustec/jekyll-diagrams" target="\_blank">jekyll-diagrams</a> plugin. We can use different languages such as <a href="https://mermaid-js.github.io/mermaid/" target="\_blank">mermaid</a>, <a href="https://plantuml.com/" target="\_blank">plantuml</a>, <a href="https://vega.github.io/vega-lite/" target="\_blank">vega-lite</a>, etc.</p> <p>We prepared mermaid-cli before, so here are examples showing how to use mermaid.</p> <h3 id="mermaid">Mermaid</h3> <p><strong>Sequence Diagram</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{% mermaid %}
sequenceDiagram
    participant John
    participant Alice
    Alice-&gt;&gt;John: Hello John, how are you?
    John--&gt;&gt;Alice: Great!
{% endmermaid %}
</code></pre></div></div> <div class="jekyll-diagrams diagrams mermaid"> <svg id="mermaid-1676103388844" width="100%" xmlns="http://www.w3.org/2000/svg" height="100%" style="max-width:450px;" viewBox="-50 -10 450 231"><style>#mermaid-1676103388844 .label{font-family:trebuchet ms,verdana,arial;color:#333}#mermaid-1676103388844 .node circle,#mermaid-1676103388844 .node ellipse,#mermaid-1676103388844 .node polygon,#mermaid-1676103388844 .node rect{fill:#ececff;stroke:#9370db;stroke-width:1px}#mermaid-1676103388844 .node.clickable{cursor:pointer}#mermaid-1676103388844 .arrowheadPath{fill:#333}#mermaid-1676103388844 .edgePath .path{stroke:#333;stroke-width:1.5px}#mermaid-1676103388844 .edgeLabel{background-color:#e8e8e8}#mermaid-1676103388844 .cluster rect{fill:#ffffde!important;stroke:#aa3!important;stroke-width:1px!important}#mermaid-1676103388844 .cluster text{fill:#333}#mermaid-1676103388844 div.mermaidTooltip{position:absolute;text-align:center;max-width:200px;padding:2px;font-family:trebuchet ms,verdana,arial;font-size:12px;background:#ffffde;border:1px solid #aa3;border-radius:2px;pointer-events:none;z-index:100}#mermaid-1676103388844 .actor{stroke:#ccf;fill:#ececff}#mermaid-1676103388844 text.actor{fill:#000;stroke:none}#mermaid-1676103388844 .actor-line{stroke:grey}#mermaid-1676103388844 .messageLine0{marker-end:"url(#arrowhead)"}#mermaid-1676103388844 .messageLine0,#mermaid-1676103388844 .messageLine1{stroke-width:1.5;stroke-dasharray:"2 2";stroke:#333}#mermaid-1676103388844 #arrowhead{fill:#333}#mermaid-1676103388844 #crosshead path{fill:#333!important;stroke:#333!important}#mermaid-1676103388844 .messageText{fill:#333;stroke:none}#mermaid-1676103388844 .labelBox{stroke:#ccf;fill:#ececff}#mermaid-1676103388844 .labelText,#mermaid-1676103388844 .loopText{fill:#000;stroke:none}#mermaid-1676103388844 .loopLine{stroke-width:2;stroke-dasharray:"2 2";marker-end:"url(#arrowhead)";stroke:#ccf}#mermaid-1676103388844 .note{stroke:#aa3;fill:#fff5ad}#mermaid-1676103388844 .noteText{fill:#000;stroke:none;font-family:trebuchet ms,verdana,arial;font-size:14px}#mermaid-1676103388844 .section{stroke:none;opacity:.2}#mermaid-1676103388844 .section0{fill:rgba(102,102,255,.49)}#mermaid-1676103388844 .section2{fill:#fff400}#mermaid-1676103388844 .section1,#mermaid-1676103388844 .section3{fill:#fff;opacity:.2}#mermaid-1676103388844 .sectionTitle0,#mermaid-1676103388844 .sectionTitle1,#mermaid-1676103388844 .sectionTitle2,#mermaid-1676103388844 .sectionTitle3{fill:#333}#mermaid-1676103388844 .sectionTitle{text-anchor:start;font-size:11px;text-height:14px}#mermaid-1676103388844 .grid .tick{stroke:#d3d3d3;opacity:.3;shape-rendering:crispEdges}#mermaid-1676103388844 .grid path{stroke-width:0}#mermaid-1676103388844 .today{fill:none;stroke:red;stroke-width:2px}#mermaid-1676103388844 .task{stroke-width:2}#mermaid-1676103388844 .taskText{text-anchor:middle;font-size:11px}#mermaid-1676103388844 .taskTextOutsideRight{fill:#000;text-anchor:start;font-size:11px}#mermaid-1676103388844 .taskTextOutsideLeft{fill:#000;text-anchor:end;font-size:11px}#mermaid-1676103388844 .taskText0,#mermaid-1676103388844 .taskText1,#mermaid-1676103388844 .taskText2,#mermaid-1676103388844 .taskText3{fill:#fff}#mermaid-1676103388844 .task0,#mermaid-1676103388844 .task1,#mermaid-1676103388844 .task2,#mermaid-1676103388844 .task3{fill:#8a90dd;stroke:#534fbc}#mermaid-1676103388844 .taskTextOutside0,#mermaid-1676103388844 .taskTextOutside1,#mermaid-1676103388844 .taskTextOutside2,#mermaid-1676103388844 .taskTextOutside3{fill:#000}#mermaid-1676103388844 .active0,#mermaid-1676103388844 .active1,#mermaid-1676103388844 .active2,#mermaid-1676103388844 .active3{fill:#bfc7ff;stroke:#534fbc}#mermaid-1676103388844 .activeText0,#mermaid-1676103388844 .activeText1,#mermaid-1676103388844 .activeText2,#mermaid-1676103388844 .activeText3{fill:#000!important}#mermaid-1676103388844 .done0,#mermaid-1676103388844 .done1,#mermaid-1676103388844 .done2,#mermaid-1676103388844 .done3{stroke:grey;fill:#d3d3d3;stroke-width:2}#mermaid-1676103388844 .doneText0,#mermaid-1676103388844 .doneText1,#mermaid-1676103388844 .doneText2,#mermaid-1676103388844 .doneText3{fill:#000!important}#mermaid-1676103388844 .crit0,#mermaid-1676103388844 .crit1,#mermaid-1676103388844 .crit2,#mermaid-1676103388844 .crit3{stroke:#f88;fill:red;stroke-width:2}#mermaid-1676103388844 .activeCrit0,#mermaid-1676103388844 .activeCrit1,#mermaid-1676103388844 .activeCrit2,#mermaid-1676103388844 .activeCrit3{stroke:#f88;fill:#bfc7ff;stroke-width:2}#mermaid-1676103388844 .doneCrit0,#mermaid-1676103388844 .doneCrit1,#mermaid-1676103388844 .doneCrit2,#mermaid-1676103388844 .doneCrit3{stroke:#f88;fill:#d3d3d3;stroke-width:2;cursor:pointer;shape-rendering:crispEdges}#mermaid-1676103388844 .activeCritText0,#mermaid-1676103388844 .activeCritText1,#mermaid-1676103388844 .activeCritText2,#mermaid-1676103388844 .activeCritText3,#mermaid-1676103388844 .doneCritText0,#mermaid-1676103388844 .doneCritText1,#mermaid-1676103388844 .doneCritText2,#mermaid-1676103388844 .doneCritText3{fill:#000!important}#mermaid-1676103388844 .titleText{text-anchor:middle;font-size:18px;fill:#000}
#mermaid-1676103388844 g.classGroup text{fill:#9370db;stroke:none;font-family:trebuchet ms,verdana,arial;font-size:10px}#mermaid-1676103388844 g.classGroup rect{fill:#ececff;stroke:#9370db}#mermaid-1676103388844 g.classGroup line{stroke:#9370db;stroke-width:1}#mermaid-1676103388844 .classLabel .box{stroke:none;stroke-width:0;fill:#ececff;opacity:.5}#mermaid-1676103388844 .classLabel .label{fill:#9370db;font-size:10px}#mermaid-1676103388844 .relation{stroke:#9370db;stroke-width:1;fill:none}#mermaid-1676103388844 #compositionEnd,#mermaid-1676103388844 #compositionStart{fill:#9370db;stroke:#9370db;stroke-width:1}#mermaid-1676103388844 #aggregationEnd,#mermaid-1676103388844 #aggregationStart{fill:#ececff;stroke:#9370db;stroke-width:1}#mermaid-1676103388844 #dependencyEnd,#mermaid-1676103388844 #dependencyStart,#mermaid-1676103388844 #extensionEnd,#mermaid-1676103388844 #extensionStart{fill:#9370db;stroke:#9370db;stroke-width:1}#mermaid-1676103388844 .branch-label,#mermaid-1676103388844 .commit-id,#mermaid-1676103388844 .commit-msg{fill:#d3d3d3;color:#d3d3d3}</style><style>#mermaid-1676103388844{color:#000;font:normal normal 400 normal 16px / normal "Times New Roman"}</style><g></g><g><line id="actor0" x1="75" y1="5" x2="75" y2="220" class="actor-line" stroke-width="0.5px" stroke="#999"></line><rect x="0" y="0" fill="#eaeaea" stroke="#666" width="150" height="65" rx="3" ry="3" class="actor"></rect><text x="75" y="32.5" dominant-baseline="central" alignment-baseline="central" class="actor" style="text-anchor: middle;"><tspan x="75" dy="0">John</tspan></text></g><g><line id="actor1" x1="275" y1="5" x2="275" y2="220" class="actor-line" stroke-width="0.5px" stroke="#999"></line><rect x="200" y="0" fill="#eaeaea" stroke="#666" width="150" height="65" rx="3" ry="3" class="actor"></rect><text x="275" y="32.5" dominant-baseline="central" alignment-baseline="central" class="actor" style="text-anchor: middle;"><tspan x="275" dy="0">Alice</tspan></text></g><defs><marker id="arrowhead" refX="5" refY="2" markerWidth="6" markerHeight="4" orient="auto"><path d="M 0,0 V 4 L6,2 Z"></path></marker></defs><defs><marker id="crosshead" markerWidth="15" markerHeight="8" orient="auto" refX="16" refY="4"><path fill="black" stroke="#000000" stroke-width="1px" d="M 9,2 V 6 L16,4 Z" style="stroke-dasharray: 0, 0;"></path><path fill="none" stroke="#000000" stroke-width="1px" d="M 0,1 L 6,7 M 6,1 L 0,7" style="stroke-dasharray: 0, 0;"></path></marker></defs><g><text x="175" y="93" class="messageText" style="text-anchor: middle;">Hello John, how are you?</text><line x1="275" y1="100" x2="75" y2="100" class="messageLine0" stroke-width="2" stroke="black" marker-end="url(#arrowhead)" style="fill: none;"></line></g><g><text x="175" y="128" class="messageText" style="text-anchor: middle;">Great!</text><line x1="75" y1="135" x2="275" y2="135" class="messageLine1" stroke-width="2" stroke="black" marker-end="url(#arrowhead)" style="stroke-dasharray: 3, 3; fill: none;"></line></g><g><rect x="0" y="155" fill="#eaeaea" stroke="#666" width="150" height="65" rx="3" ry="3" class="actor"></rect><text x="75" y="187.5" dominant-baseline="central" alignment-baseline="central" class="actor" style="text-anchor: middle;"><tspan x="75" dy="0">John</tspan></text></g><g><rect x="200" y="155" fill="#eaeaea" stroke="#666" width="150" height="65" rx="3" ry="3" class="actor"></rect><text x="275" y="187.5" dominant-baseline="central" alignment-baseline="central" class="actor" style="text-anchor: middle;"><tspan x="275" dy="0">Alice</tspan></text></g></svg> </div> <p><strong>flowchart</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>flowchart TD
    A[Start] --&gt; B{Is it?}
    B -- Yes --&gt; C[OK]
    C --&gt; D[Rethink]
    D --&gt; B
    B -- No ----&gt; E[End]
</code></pre></div></div> <div class="jekyll-diagrams diagrams mermaid"> Rendering Failed: mmdc --puppeteerConfigFile /home/runner/work/kobehub.github.io/kobehub.github.io/vendor/bundle/ruby/3.0.0/gems/jekyll-diagrams-0.10.0/vendor/mermaid_puppeteer_config.json --input /tmp/input20230211-1764-vd920v --output /tmp/output20230211-1764-jwgbms.svg: node:internal/process/promises:279 triggerUncaughtException(err, true /* fromPromise */); ^ Error: Evaluation failed: Error: Parse error on line 1: flowchart TD A[S ^ Expecting 'NEWLINE', 'SPACE', 'GRAPH', got 'ALPHA' at Yt.parseError (file:///usr/local/lib/node_modules/mermaid.cli/mermaid.min.js:1:486512) at Yt.parse (file:///usr/local/lib/node_modules/mermaid.cli/mermaid.min.js:1:487678) at Object.e.getClasses (file:///usr/local/lib/node_modules/mermaid.cli/mermaid.min.js:1:749437) at Object.render (file:///usr/local/lib/node_modules/mermaid.cli/mermaid.min.js:1:759998) at s (file:///usr/local/lib/node_modules/mermaid.cli/mermaid.min.js:8:233) at Object.init (file:///usr/local/lib/node_modules/mermaid.cli/mermaid.min.js:8:318) at __puppeteer_evaluation_script__:17:20 at ExecutionContext._evaluateInternal (/usr/local/lib/node_modules/mermaid.cli/node_modules/puppeteer/lib/ExecutionContext.js:122:13) at processTicksAndRejections (node:internal/process/task_queues:96:5) at async ExecutionContext.evaluate (/usr/local/lib/node_modules/mermaid.cli/node_modules/puppeteer/lib/ExecutionContext.js:48:12) at async ElementHandle.evaluate (/usr/local/lib/node_modules/mermaid.cli/node_modules/puppeteer/lib/JSHandle.js:55:12) at async ElementHandle.$eval (/usr/local/lib/node_modules/mermaid.cli/node_modules/puppeteer/lib/JSHandle.js:478:20) -- ASYNC -- at ExecutionContext.<anonymous> (/usr/local/lib/node_modules/mermaid.cli/node_modules/puppeteer/lib/helper.js:111:15) at ElementHandle.evaluate (/usr/local/lib/node_modules/mermaid.cli/node_modules/puppeteer/lib/JSHandle.js:55:42) at ElementHandle.<anonymous> (/usr/local/lib/node_modules/mermaid.cli/node_modules/puppeteer/lib/helper.js:112:23) at ElementHandle.$eval (/usr/local/lib/node_modules/mermaid.cli/node_modules/puppeteer/lib/JSHandle.js:478:40) at processTicksAndRejections (node:internal/process/task_queues:96:5) -- ASYNC -- at ElementHandle.<anonymous> (/usr/local/lib/node_modules/mermaid.cli/node_modules/puppeteer/lib/helper.js:111:15) at DOMWorld.$eval (/usr/local/lib/node_modules/mermaid.cli/node_modules/puppeteer/lib/DOMWorld.js:156:21) at processTicksAndRejections (node:internal/process/task_queues:96:5) -- ASYNC -- at Frame.<anonymous> (/usr/local/lib/node_modules/mermaid.cli/node_modules/puppeteer/lib/helper.js:111:15) at Page.$eval (/usr/local/lib/node_modules/mermaid.cli/node_modules/puppeteer/lib/Page.js:347:29) at Page.<anonymous> (/usr/local/lib/node_modules/mermaid.cli/node_modules/puppeteer/lib/helper.js:112:23) at /usr/local/lib/node_modules/mermaid.cli/index.bundle.js:83:14 at Generator.next (<anonymous>) at step (/usr/local/lib/node_modules/mermaid.cli/index.bundle.js:4:191) at /usr/local/lib/node_modules/mermaid.cli/index.bundle.js:4:361 at processTicksAndRejections (node:internal/process/task_queues:96:5) &lt;/div&gt; **Class Diagrams** ```mermaid --- title: Animal example --- classDiagram note "From Duck till Zebra" Animal &lt;|-- Duck note for Duck "can fly\ncan swim\ncan dive\ncan help in debugging" Animal &lt;|-- Fish Animal &lt;|-- Zebra Animal : +int age Animal : +String gender Animal: +isMammal() Animal: +mate() class Duck{ +String beakColor +swim() +quack() } class Fish{ -int sizeInFeet -canEat() } class Zebra{ +bool is_wild +run() } ``` <div class="jekyll-diagrams diagrams mermaid"> Rendering Failed: mmdc --puppeteerConfigFile /home/runner/work/kobehub.github.io/kobehub.github.io/vendor/bundle/ruby/3.0.0/gems/jekyll-diagrams-0.10.0/vendor/mermaid_puppeteer_config.json --input /tmp/input20230211-1764-2tv6ac --output /tmp/output20230211-1764-kk397b.svg: node:internal/process/promises:279 triggerUncaughtException(err, true /* fromPromise */); ^ Error: Evaluation failed: Error: Parse error on line 1: ---title: Animal ex ^ Expecting 'NEWLINE', 'SPACE', 'GRAPH', got 'ARROW_OPEN' at Yt.parseError (file:///usr/local/lib/node_modules/mermaid.cli/mermaid.min.js:1:486512) at Yt.parse (file:///usr/local/lib/node_modules/mermaid.cli/mermaid.min.js:1:487678) at Object.e.getClasses (file:///usr/local/lib/node_modules/mermaid.cli/mermaid.min.js:1:749437) at Object.render (file:///usr/local/lib/node_modules/mermaid.cli/mermaid.min.js:1:759998) at s (file:///usr/local/lib/node_modules/mermaid.cli/mermaid.min.js:8:233) at Object.init (file:///usr/local/lib/node_modules/mermaid.cli/mermaid.min.js:8:318) at __puppeteer_evaluation_script__:17:20 at ExecutionContext._evaluateInternal (/usr/local/lib/node_modules/mermaid.cli/node_modules/puppeteer/lib/ExecutionContext.js:122:13) at processTicksAndRejections (node:internal/process/task_queues:96:5) at async ExecutionContext.evaluate (/usr/local/lib/node_modules/mermaid.cli/node_modules/puppeteer/lib/ExecutionContext.js:48:12) at async ElementHandle.evaluate (/usr/local/lib/node_modules/mermaid.cli/node_modules/puppeteer/lib/JSHandle.js:55:12) at async ElementHandle.$eval (/usr/local/lib/node_modules/mermaid.cli/node_modules/puppeteer/lib/JSHandle.js:478:20) -- ASYNC -- at ExecutionContext.<anonymous> (/usr/local/lib/node_modules/mermaid.cli/node_modules/puppeteer/lib/helper.js:111:15) at ElementHandle.evaluate (/usr/local/lib/node_modules/mermaid.cli/node_modules/puppeteer/lib/JSHandle.js:55:42) at ElementHandle.<anonymous> (/usr/local/lib/node_modules/mermaid.cli/node_modules/puppeteer/lib/helper.js:112:23) at ElementHandle.$eval (/usr/local/lib/node_modules/mermaid.cli/node_modules/puppeteer/lib/JSHandle.js:478:40) at processTicksAndRejections (node:internal/process/task_queues:96:5) -- ASYNC -- at ElementHandle.<anonymous> (/usr/local/lib/node_modules/mermaid.cli/node_modules/puppeteer/lib/helper.js:111:15) at DOMWorld.$eval (/usr/local/lib/node_modules/mermaid.cli/node_modules/puppeteer/lib/DOMWorld.js:156:21) at processTicksAndRejections (node:internal/process/task_queues:96:5) -- ASYNC -- at Frame.<anonymous> (/usr/local/lib/node_modules/mermaid.cli/node_modules/puppeteer/lib/helper.js:111:15) at Page.$eval (/usr/local/lib/node_modules/mermaid.cli/node_modules/puppeteer/lib/Page.js:347:29) at Page.<anonymous> (/usr/local/lib/node_modules/mermaid.cli/node_modules/puppeteer/lib/helper.js:112:23) at /usr/local/lib/node_modules/mermaid.cli/index.bundle.js:83:14 at Generator.next (<anonymous>) at step (/usr/local/lib/node_modules/mermaid.cli/index.bundle.js:4:191) at /usr/local/lib/node_modules/mermaid.cli/index.bundle.js:4:361 at processTicksAndRejections (node:internal/process/task_queues:96:5) &lt;/div&gt; </anonymous></anonymous></anonymous></anonymous></anonymous></anonymous></div></anonymous></anonymous></anonymous></anonymous></anonymous></anonymous></div>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><summary type="html"><![CDATA[Produce great blogs with the support Jekyll]]></summary></entry><entry><title type="html">a distill-style blog post</title><link href="https://innohub.top/blog/2021/distill/" rel="alternate" type="text/html" title="a distill-style blog post"/><published>2021-05-22T00:00:00+00:00</published><updated>2021-05-22T00:00:00+00:00</updated><id>https://innohub.top/blog/2021/distill</id><content type="html" xml:base="https://innohub.top/blog/2021/distill/"><![CDATA[<h2 id="equations">Equations</h2> <p>This theme supports rendering beautiful math in inline and display modes using <a href="https://www.mathjax.org/">MathJax 3</a> engine. You just need to surround your math expression with <code class="language-plaintext highlighter-rouge">$$</code>, like <code class="language-plaintext highlighter-rouge">$$ E = mc^2 $$</code>. If you leave it inside a paragraph, it will produce an inline expression, just like \(E = mc^2\).</p> <p>To use display mode, again surround your expression with <code class="language-plaintext highlighter-rouge">$$</code> and place it as a separate paragraph. Here is an example:</p> \[\left( \sum_{k=1}^n a_k b_k \right)^2 \leq \left( \sum_{k=1}^n a_k^2 \right) \left( \sum_{k=1}^n b_k^2 \right)\] <p>Note that MathJax 3 is <a href="https://docs.mathjax.org/en/latest/upgrading/whats-new-3.0.html">a major re-write of MathJax</a> that brought a significant improvement to the loading and rendering speed, which is now <a href="http://www.intmath.com/cg5/katex-mathjax-comparison.php">on par with KaTeX</a>.</p> <hr/> <h2 id="citations">Citations</h2> <p>Citations are then used in the article body with the <code class="language-plaintext highlighter-rouge">&lt;d-cite&gt;</code> tag. The key attribute is a reference to the id provided in the bibliography. The key attribute can take multiple ids, separated by commas.</p> <p>The citation is presented inline like this: <d-cite key="gregor2015draw"></d-cite> (a number that displays more information on hover). If you have an appendix, a bibliography is automatically created and populated in it.</p> <p>Distill chose a numerical inline citation style to improve readability of citation dense articles and because many of the benefits of longer citations are obviated by displaying more information on hover. However, we consider it good style to mention author last names if you discuss something at length and it fits into the flow well — the authors are human and it’s nice for them to have the community associate them with their work.</p> <hr/> <h2 id="footnotes">Footnotes</h2> <p>Just wrap the text you would like to show up in a footnote in a <code class="language-plaintext highlighter-rouge">&lt;d-footnote&gt;</code> tag. The number of the footnote will be automatically generated.<d-footnote>This will become a hoverable footnote.</d-footnote></p> <hr/> <h2 id="code-blocks">Code Blocks</h2> <p>Syntax highlighting is provided within <code class="language-plaintext highlighter-rouge">&lt;d-code&gt;</code> tags. An example of inline code snippets: <code class="language-plaintext highlighter-rouge">&lt;d-code language="html"&gt;let x = 10;&lt;/d-code&gt;</code>. For larger blocks of code, add a <code class="language-plaintext highlighter-rouge">block</code> attribute:</p> <d-code block="" language="javascript"> var x = 25; function(x) { return x * x; } </d-code> <p><strong>Note:</strong> <code class="language-plaintext highlighter-rouge">&lt;d-code&gt;</code> blocks do not look good in the dark mode. You can always use the default code-highlight using the <code class="language-plaintext highlighter-rouge">highlight</code> liquid tag:</p> <figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">25</span><span class="p">;</span>
<span class="kd">function</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">x</span> <span class="o">*</span> <span class="nx">x</span><span class="p">;</span>
<span class="p">}</span></code></pre></figure> <hr/> <h2 id="interactive-plots">Interactive Plots</h2> <p>You can add interative plots using plotly + iframes :framed_picture:</p> <div class="l-page"> <iframe src="/assets/plotly/demo.html" frameborder="0" scrolling="no" height="500px" width="100%" style="border: 1px dashed grey;"></iframe> </div> <p>The plot must be generated separately and saved into an HTML file. To generate the plot that you see above, you can use the following code snippet:</p> <figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="n">pd</span>
<span class="kn">import</span> <span class="nn">plotly.express</span> <span class="k">as</span> <span class="n">px</span>
<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">read_csv</span><span class="p">(</span>
  <span class="s">'https://raw.githubusercontent.com/plotly/datasets/master/earthquakes-23k.csv'</span>
<span class="p">)</span>
<span class="n">fig</span> <span class="o">=</span> <span class="n">px</span><span class="p">.</span><span class="n">density_mapbox</span><span class="p">(</span>
  <span class="n">df</span><span class="p">,</span>
  <span class="n">lat</span><span class="o">=</span><span class="s">'Latitude'</span><span class="p">,</span>
  <span class="n">lon</span><span class="o">=</span><span class="s">'Longitude'</span><span class="p">,</span>
  <span class="n">z</span><span class="o">=</span><span class="s">'Magnitude'</span><span class="p">,</span>
  <span class="n">radius</span><span class="o">=</span><span class="mi">10</span><span class="p">,</span>
  <span class="n">center</span><span class="o">=</span><span class="nb">dict</span><span class="p">(</span><span class="n">lat</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">lon</span><span class="o">=</span><span class="mi">180</span><span class="p">),</span>
  <span class="n">zoom</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span>
  <span class="n">mapbox_style</span><span class="o">=</span><span class="s">"stamen-terrain"</span><span class="p">,</span>
<span class="p">)</span>
<span class="n">fig</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>
<span class="n">fig</span><span class="p">.</span><span class="n">write_html</span><span class="p">(</span><span class="s">'assets/plotly/demo.html'</span><span class="p">)</span></code></pre></figure> <hr/> <h2 id="layouts">Layouts</h2> <p>The main text column is referred to as the body. It is the assumed layout of any direct descendants of the <code class="language-plaintext highlighter-rouge">d-article</code> element.</p> <div class="fake-img l-body"> <p>.l-body</p> </div> <p>For images you want to display a little larger, try <code class="language-plaintext highlighter-rouge">.l-page</code>:</p> <div class="fake-img l-page"> <p>.l-page</p> </div> <p>All of these have an outset variant if you want to poke out from the body text a little bit. For instance:</p> <div class="fake-img l-body-outset"> <p>.l-body-outset</p> </div> <div class="fake-img l-page-outset"> <p>.l-page-outset</p> </div> <p>Occasionally you’ll want to use the full browser width. For this, use <code class="language-plaintext highlighter-rouge">.l-screen</code>. You can also inset the element a little from the edge of the browser by using the inset variant.</p> <div class="fake-img l-screen"> <p>.l-screen</p> </div> <div class="fake-img l-screen-inset"> <p>.l-screen-inset</p> </div> <p>The final layout is for marginalia, asides, and footnotes. It does not interrupt the normal flow of <code class="language-plaintext highlighter-rouge">.l-body</code> sized text except on mobile screen sizes.</p> <div class="fake-img l-gutter"> <p>.l-gutter</p> </div> <hr/> <h2 id="other-typography">Other Typography?</h2> <p>Emphasis, aka italics, with <em>asterisks</em> (<code class="language-plaintext highlighter-rouge">*asterisks*</code>) or <em>underscores</em> (<code class="language-plaintext highlighter-rouge">_underscores_</code>).</p> <p>Strong emphasis, aka bold, with <strong>asterisks</strong> or <strong>underscores</strong>.</p> <p>Combined emphasis with <strong>asterisks and <em>underscores</em></strong>.</p> <p>Strikethrough uses two tildes. <del>Scratch this.</del></p> <ol> <li>First ordered list item</li> <li>Another item ⋅⋅* Unordered sub-list.</li> <li>Actual numbers don’t matter, just that it’s a number ⋅⋅1. Ordered sub-list</li> <li>And another item.</li> </ol> <p>⋅⋅⋅You can have properly indented paragraphs within list items. Notice the blank line above, and the leading spaces (at least one, but we’ll use three here to also align the raw Markdown).</p> <p>⋅⋅⋅To have a line break without a paragraph, you will need to use two trailing spaces.⋅⋅ ⋅⋅⋅Note that this line is separate, but within the same paragraph.⋅⋅ ⋅⋅⋅(This is contrary to the typical GFM line break behaviour, where trailing spaces are not required.)</p> <ul> <li>Unordered list can use asterisks</li> <li>Or minuses</li> <li>Or pluses</li> </ul> <p><a href="https://www.google.com">I’m an inline-style link</a></p> <p><a href="https://www.google.com" title="Google's Homepage">I’m an inline-style link with title</a></p> <p><a href="https://www.mozilla.org">I’m a reference-style link</a></p> <p><a href="../blob/master/LICENSE">I’m a relative reference to a repository file</a></p> <p><a href="http://slashdot.org">You can use numbers for reference-style link definitions</a></p> <p>Or leave it empty and use the <a href="http://www.reddit.com">link text itself</a>.</p> <p>URLs and URLs in angle brackets will automatically get turned into links. http://www.example.com or <a href="http://www.example.com">http://www.example.com</a> and sometimes example.com (but not on Github, for example).</p> <p>Some text to show that the reference links can follow later.</p> <p>Here’s our logo (hover to see the title text):</p> <p>Inline-style: <img src="https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png" alt="alt text" title="Logo Title Text 1"/></p> <p>Reference-style: <img src="https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png" alt="alt text" title="Logo Title Text 2"/></p> <p>Inline <code class="language-plaintext highlighter-rouge">code</code> has <code class="language-plaintext highlighter-rouge">back-ticks around</code> it.</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">s</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">JavaScript syntax highlighting</span><span class="dl">"</span><span class="p">;</span>
<span class="nx">alert</span><span class="p">(</span><span class="nx">s</span><span class="p">);</span>
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">s</span> <span class="o">=</span> <span class="s">"Python syntax highlighting"</span>
<span class="k">print</span> <span class="n">s</span>
</code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>No language indicated, so no syntax highlighting.
But let's throw in a &lt;b&gt;tag&lt;/b&gt;.
</code></pre></div></div> <p>Colons can be used to align columns.</p> <table> <thead> <tr> <th>Tables</th> <th style="text-align: center">Are</th> <th style="text-align: right">Cool</th> </tr> </thead> <tbody> <tr> <td>col 3 is</td> <td style="text-align: center">right-aligned</td> <td style="text-align: right">$1600</td> </tr> <tr> <td>col 2 is</td> <td style="text-align: center">centered</td> <td style="text-align: right">$12</td> </tr> <tr> <td>zebra stripes</td> <td style="text-align: center">are neat</td> <td style="text-align: right">$1</td> </tr> </tbody> </table> <p>There must be at least 3 dashes separating each header cell. The outer pipes (|) are optional, and you don’t need to make the raw Markdown line up prettily. You can also use inline Markdown.</p> <table> <thead> <tr> <th>Markdown</th> <th>Less</th> <th>Pretty</th> </tr> </thead> <tbody> <tr> <td><em>Still</em></td> <td><code class="language-plaintext highlighter-rouge">renders</code></td> <td><strong>nicely</strong></td> </tr> <tr> <td>1</td> <td>2</td> <td>3</td> </tr> </tbody> </table> <blockquote> <p>Blockquotes are very handy in email to emulate reply text. This line is part of the same quote.</p> </blockquote> <p>Quote break.</p> <blockquote> <p>This is a very long line that will still be quoted properly when it wraps. Oh boy let’s keep writing to make sure this is long enough to actually wrap for everyone. Oh, you can <em>put</em> <strong>Markdown</strong> into a blockquote.</p> </blockquote> <p>Here’s a line for us to start with.</p> <p>This line is separated from the one above by two newlines, so it will be a <em>separate paragraph</em>.</p> <p>This line is also a separate paragraph, but… This line is only separated by a single newline, so it’s a separate line in the <em>same paragraph</em>.</p>]]></content><author><name>Albert Einstein</name></author><summary type="html"><![CDATA[an example of a distill-style blog post and main elements]]></summary></entry></feed>