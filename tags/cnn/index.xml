<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Cnn on Inno Jia</title>
    <link>https://kobehub.github.io/tags/cnn/</link>
    <description>Recent content in Cnn on Inno Jia</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Tue, 22 Jan 2019 23:13:21 +0800</lastBuildDate>
    
	<atom:link href="https://kobehub.github.io/tags/cnn/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Introduce to Convolutional neural network</title>
      <link>https://kobehub.github.io/posts/introduce-to-cnn/</link>
      <pubDate>Tue, 22 Jan 2019 23:13:21 +0800</pubDate>
      
      <guid>https://kobehub.github.io/posts/introduce-to-cnn/</guid>
      <description>CNN简介 1. 特征 Background:
深度学习的基本原理是基于人工神经网络，信号从一个神经元进入，经过非线性的activation function,
传到下一层神经元；再经过该层神经元的激活，继续向下传递，如此循环往复到输出层，正是由于这些非线性函数的反复叠加，才使得神经网络有了足够的capacity来抓取复杂的pattern
所以使用activation function是必须的，如果不使用激活函数，每层的输出都是上一层的线性组合，与没有隐藏层效果相当，这种情形就是最原始的感知机(Preceptron)
Regular Neural Networks(RNN):
一个神经网络的最简单的结构包括输入层，隐含层，输出层，每一层上有多个神经元，上一层的神经元通过激活函数映射到下一层的神经元，每个神经元之间有相应的权值，普通的神经网络架构都是全连接的，即每一层的每个神经元的输入包含上一层的全部输出
Convolutional Neural Networks(CNNs/ConvNets):
卷积神经网络与普通神经网络相似，由神经元构成，具有可学习的weights and biases，每个神经元接收一个输入进行点积运算后，并且可以选择非线性跟随．整个网络仍然表现出单一的可微分分数函数：
从一端的原始图像像素(raw pxiel)到另一端的分数函数
并且在最后一层（全连接层）仍然具有损失函数(SVM/Softmax) ConvNet体系结构明确地假设输入是图像，这允许我们将某些属性编码到体系结构中。这些使得forward 函数　更有效地实施并极大地减少了网络中的参数数量
2.与全连接神经网络的比较 对于一个32*32*3的图像而言，如果采用RNN(regular neural nets) 将其转化为一维矩阵，如果采用全连接架构，对于每一个像素都需要一个神经元　所以普通神经网络的一层将需要　32*32*3= 3027 个权重
不适合进行图像的处理，而且过多的参数极易导致过拟合
使用神经网络:
 特征提取的高效性 数据格式简易性 参数数目少量性  卷积神经网络每一层使得其神经元分布在三个维度上，每一层把一个3-D的volume输入转化为另一个3-D volume．图中的width, height代表了图像的维度大小，depth为3代表色素通道(R G B 3 channels)
 A ConvNet is made up of Layers. Every Layer has a simple API: It transforms an input 3D volume to an output 3D volume with some differentiable function that may or may not have parameters.</description>
    </item>
    
  </channel>
</rss>