<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Inno Jia</title>
    <link>https://kobehub.github.io/</link>
    <description>Recent content on Inno Jia</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Sat, 12 Jan 2019 17:43:29 +0800</lastBuildDate>
    
	<atom:link href="https://kobehub.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>[Review] Main concept of ML</title>
      <link>https://kobehub.github.io/posts/review-main-concept-of-ml/</link>
      <pubDate>Sat, 12 Jan 2019 17:43:29 +0800</pubDate>
      
      <guid>https://kobehub.github.io/posts/review-main-concept-of-ml/</guid>
      <description>机器学习的一些重要概念 [TOC]
1. 机器学习系统的主要操作 对于一个基于普通机器学习方法的分类系统，可能具有以下的基本操作步骤：
 数据收集(Sensing)
 数据预处理(Preprocessing):
  通常使用分割操作，将分类目标与背景进行分离
 特征定义以及特征提取(Feature definition and Extraction)  以上过程一般都需要使用到一定的先验知识(Prior Knowledge)
 选取模型(Model Selection)
 训练(Training)
 模型评估(Evaluation)
  ##2.机器学习的主要任务
有标记数据的分类(Classification)以及回归(Regression)，无标记数据进行聚簇分析(Clustering Analysis),异常检测(Anomaly Detection).
1. 学习器  #### K-Nearest Neighbor(K-NN)  在特征空间找到K个最近的邻居，选取数量最大的类别作为某个样本的预测类别。无需训练，适用于小数据量，非线性问题
 #### Decision Tree  通过每次选取最优特征进行进一步决策，构成了一组规则集组成的决策树，通过输入样本的特征进行分类任务。
决策过程具有良好的可理解性，对于单一因素即可决定的预测结果的问题，可以弥补基于统计的机器学习的不足。
 #### Support Vector Machine  在特征空间选取一个超平面，使得所有样本点到超平面的总距离最小。通过定义一个间隔(Margin),最大化Margin，选取一个合适的超平面用于分类任务。通过使用合适的变换核可以进行解决非线性问题。
在解决小规模、非线性问题上具有优势，因为对于预测起到决定性作用的，是少数边界上的向量(Support Vector)
 朴素贝叶斯(Naive Bayesian) Neural Networks 最小二乘 (Least Squares) 高斯混合模型（Gaussian Mixture Model） Hidden Markov Model ####Dynamic Bayesian Network</description>
    </item>
    
    <item>
      <title>Project</title>
      <link>https://kobehub.github.io/projects/</link>
      <pubDate>Tue, 08 Jan 2019 20:24:57 +0800</pubDate>
      
      <guid>https://kobehub.github.io/projects/</guid>
      <description>Waiting to be updated&amp;hellip;</description>
    </item>
    
    <item>
      <title>Contact</title>
      <link>https://kobehub.github.io/contact/</link>
      <pubDate>Tue, 08 Jan 2019 17:28:13 +0800</pubDate>
      
      <guid>https://kobehub.github.io/contact/</guid>
      <description> Email:jdgets111@gmail.com
 WeChat: Add Contacts jdgets, or scan the QR code in WeChat
  </description>
    </item>
    
    <item>
      <title>Record of build GitHub Pages use Hugo</title>
      <link>https://kobehub.github.io/posts/record-of-build-github-pages-use-hugo/</link>
      <pubDate>Tue, 08 Jan 2019 10:10:02 +0800</pubDate>
      
      <guid>https://kobehub.github.io/posts/record-of-build-github-pages-use-hugo/</guid>
      <description>前期准备 1. 本地下载安装Hugo 基于Ubuntu 16.04安装Hugo,Hugo使用Golang实现，可以直接通过源码编译安装。也可以使用已发行的版本，对于基于Debian的linux发行版，可以使用 apt,或者 snap 包管理进行最快速的安装
apt-get install hugo snap install install hugo --channel=extended # 安装Sass/SCSS版本 源码安装：
首先需要声明一个系统的GOPATH指明默认golang程序的安装路径，export GOPATH=$HOME/go ,然后clone 到本地进行编译安装
git clone https://github.com/gohugoio/hugo.git cd hugo go install 2. 建立的站点 在工作目录下，建立一个新的站点
hugo new site Hugo-site cd Hugo-site git init  该名称可以任意更换，然后添加新的主题。初始化git仓库后添加主题。可以采用hugo-coder 主题做为新的站点主题。
git submodule add https://github.com/luizdepra/hugo-coder.git themes/hugo-coder cp themes/hugo-coder/exampleSite/config.toml config.toml  然后将样例站点的配置文件cp到主文件夹下，同时将themes/hugo-coder 文件夹下的static, layouts 文件夹复制到主目录下，进行内容的更换。
3. 编辑新的文章 hugo new posts/title.md
hugo使用markdown进行文章书写，可以使用该命令建立一篇新的文章，新的文件出现在content/posts/ 文件夹下。注意需要将文件头的draft 改为false,才可以正式发布。
4.测试站点 hugo server -D 在浏览器访问[http://localhost:1313]就可以查看网站内容。</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://kobehub.github.io/about/</link>
      <pubDate>Mon, 07 Jan 2019 16:10:59 +0800</pubDate>
      
      <guid>https://kobehub.github.io/about/</guid>
      <description>I am Inno Jia. A junior in School of Software, Shandong University. I will graduate in 2020.
My major is Artificial Intelligence, and my interests focus on machine learning and algorithm. Now my work is mainly at signal processing. I am a programming enthusiast and willing to share and discuss.
I am a typical user of python, and my favorite static language is Golang. In many ways, I like to learn various programming languages and skills.</description>
    </item>
    
  </channel>
</rss>